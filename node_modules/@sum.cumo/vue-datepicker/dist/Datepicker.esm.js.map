{"version":3,"file":"Datepicker.esm.js","sources":["../src/locale/Language.js","../src/locale/translations/en.js","../src/utils/calendarSlots.js","../src/utils/DateUtils.js","../src/mixins/inputProps.vue","../node_modules/vue-runtime-helpers/dist/normalize-component.mjs","../src/components/DateInput.vue","../src/utils/cellUtils.js","../src/utils/DisabledDate.js","../src/mixins/navMixin.vue","../src/components/PickerHeader.vue","../src/mixins/pickerMixin.vue","../src/utils/HighlightedDate.js","../src/components/PickerCells.vue","../src/components/UpButton.vue","../src/components/PickerDay.vue","../src/components/PickerMonth.vue","../src/components/PickerYear.vue","../src/utils/dom.js","../src/components/Popup.vue","../src/components/Datepicker.vue"],"sourcesContent":["export default class Language {\n  // eslint-disable-next-line max-params\n  constructor(\n    language,\n    months,\n    monthsAbbr,\n    days,\n    rtl = false,\n    ymd = false,\n    yearSuffix = '',\n  ) {\n    this.language = language\n    this.months = months\n    this.monthsAbbr = monthsAbbr\n    this.days = days\n    this.rtl = rtl\n    this.ymd = ymd\n    this.yearSuffix = yearSuffix\n  }\n\n  /* eslint-disable no-underscore-dangle */\n  get language() {\n    return this._language\n  }\n\n  set language(language) {\n    if (typeof language !== 'string') {\n      throw new TypeError('Language must be a string')\n    }\n    this._language = language\n  }\n\n  get months() {\n    return this._months\n  }\n\n  set months(months) {\n    if (months.length !== 12) {\n      throw new RangeError(\n        `There must be 12 months for ${this.language} language`,\n      )\n    }\n    this._months = months\n  }\n\n  get monthsAbbr() {\n    return this._monthsAbbr\n  }\n\n  set monthsAbbr(monthsAbbr) {\n    if (monthsAbbr.length !== 12) {\n      throw new RangeError(\n        `There must be 12 abbreviated months for ${this.language} language`,\n      )\n    }\n    this._monthsAbbr = monthsAbbr\n  }\n\n  get days() {\n    return this._days\n  }\n\n  set days(days) {\n    if (days.length !== 7) {\n      throw new RangeError(`There must be 7 days for ${this.language} language`)\n    }\n    this._days = days\n  }\n\n  getDaysStartingOn(firstDayOfWeek) {\n    const firstDays = this._days.slice(firstDayOfWeek)\n    const lastDays = this._days.slice(0, firstDayOfWeek)\n\n    return firstDays.concat(lastDays)\n  }\n\n  getMonthByAbbrName(name) {\n    const monthValue = this._monthsAbbr.findIndex((month) => month === name) + 1\n    return monthValue < 10 ? `0${monthValue}` : `${monthValue}`\n  }\n\n  getMonthByName(name) {\n    const monthValue = this._months.findIndex((month) => month === name) + 1\n    return monthValue < 10 ? `0${monthValue}` : `${monthValue}`\n  }\n}\n","import Language from '../Language'\n\nexport default new Language(\n  'English',\n  [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ],\n  ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n)\n","export default [\n  'beforeCalendarHeaderDay',\n  'calendarFooterDay',\n  'beforeCalendarHeaderMonth',\n  'calendarFooterMonth',\n  'beforeCalendarHeaderYear',\n  'calendarFooterYear',\n  'nextIntervalBtn',\n  'prevIntervalBtn',\n]\n","import en from '~/locale/translations/en'\n\n// eslint-disable-next-line complexity,max-statements\nconst getParsedDate = ({ formatStr, dateStr, translation }) => {\n  const splitter = formatStr.match(/-|\\/|\\s|\\./) || ['-']\n  const df = formatStr.split(splitter[0])\n  const ds = dateStr.split(splitter[0])\n  const ymd = [new Date().getFullYear(), '01', '01']\n  for (let i = 0; i < df.length; i += 1) {\n    if (/yyyy/i.test(df[i])) {\n      ymd[0] = ds[i]\n    } else if (/mmmm/i.test(df[i])) {\n      ymd[1] = translation.getMonthByName(ds[i])\n    } else if (/mmm/i.test(df[i])) {\n      ymd[1] = translation.getMonthByAbbrName(ds[i])\n    } else if (/mm/i.test(df[i])) {\n      ymd[1] = ds[i]\n    } else if (/m/i.test(df[i])) {\n      ymd[1] = ds[i]\n    } else if (/dd/i.test(df[i])) {\n      ymd[2] = ds[i]\n    } else if (/d/i.test(df[i])) {\n      const tmp = ds[i].replace(/st|rd|nd|th/g, '')\n      ymd[2] = tmp < 10 ? `0${tmp}` : `${tmp}`\n    }\n  }\n  return ymd\n}\n\nconst utils = {\n  /**\n   * @type {Boolean}\n   */\n  useUtc: false,\n\n  /**\n   * Returns the full year, using UTC or not\n   * @param {Date} date\n   */\n  getFullYear(date) {\n    return this.useUtc ? date.getUTCFullYear() : date.getFullYear()\n  },\n\n  /**\n   * Returns the month, using UTC or not\n   * @param {Date} date\n   */\n  getMonth(date) {\n    return this.useUtc ? date.getUTCMonth() : date.getMonth()\n  },\n\n  /**\n   * Returns the number of days in the month, using UTC or not\n   * @param {Date} date\n   */\n  getDaysInMonth(date) {\n    return this.daysInMonth(this.getFullYear(date), this.getMonth(date))\n  },\n\n  /**\n   * Returns the date, using UTC or not\n   * @param {Date} date\n   */\n  getDate(date) {\n    return this.useUtc ? date.getUTCDate() : date.getDate()\n  },\n\n  /**\n   * Returns the day, using UTC or not\n   * @param {Date} date\n   */\n  getDay(date) {\n    return this.useUtc ? date.getUTCDay() : date.getDay()\n  },\n\n  /**\n   * Returns the hours, using UTC or not\n   * @param {Date} date\n   */\n  getHours(date) {\n    return this.useUtc ? date.getUTCHours() : date.getHours()\n  },\n\n  /**\n   * Returns the minutes, using UTC or not\n   * @param {Date} date\n   */\n  getMinutes(date) {\n    return this.useUtc ? date.getUTCMinutes() : date.getMinutes()\n  },\n\n  /**\n   * Sets the full year, using UTC or not\n   * @param {Date} date\n   * @param {String, Number} value\n   */\n  setFullYear(date, value) {\n    return this.useUtc ? date.setUTCFullYear(value) : date.setFullYear(value)\n  },\n\n  /**\n   * Sets the month, using UTC or not\n   * @param {Date} date\n   * @param {String, Number} value\n   */\n  setMonth(date, value) {\n    return this.useUtc ? date.setUTCMonth(value) : date.setMonth(value)\n  },\n\n  /**\n   * Sets the date, using UTC or not\n   * @param {Date} date\n   * @param {String, Number} value\n   */\n  setDate(date, value) {\n    return this.useUtc ? date.setUTCDate(value) : date.setDate(value)\n  },\n\n  /**\n   * Check if date1 is equivalent to date2, without comparing the time\n   * @see https://stackoverflow.com/a/6202196/4455925\n   * @param {Date} date1\n   * @param {Date} date2\n   */\n  compareDates(date1, date2) {\n    const d1 = new Date(date1.valueOf())\n    const d2 = new Date(date2.valueOf())\n\n    this.resetDateTime(d1)\n    this.resetDateTime(d2)\n    return d1.valueOf() === d2.valueOf()\n  },\n\n  /**\n   * Validates a date object\n   * @param {Date} date - an object instantiated with the new Date constructor\n   * @return {Boolean}\n   */\n  isValidDate(date) {\n    if (Object.prototype.toString.call(date) !== '[object Date]') {\n      return false\n    }\n    return !Number.isNaN(date.valueOf())\n  },\n\n  /**\n   * Return abbreviated week day name\n   * @param {Date} date\n   * @param {Array} days\n   * @return {String}\n   */\n  getDayNameAbbr(date, days) {\n    if (typeof date !== 'object') {\n      throw TypeError('Invalid Type')\n    }\n    return days[this.getDay(date)]\n  },\n\n  /**\n   * Return day number from abbreviated week day name\n   * @param {String} abbr\n   * @return {Number}\n   */\n  getDayFromAbbr(abbr) {\n    for (let i = 0; i < en.days.length; i += 1) {\n      if (abbr.toLowerCase() === en.days[i].toLowerCase()) {\n        return i\n      }\n    }\n    throw TypeError('Invalid week day')\n  },\n\n  /**\n   * Return name of the month\n   * @param {Number|Date} month\n   * @param {Array} months\n   * @return {String}\n   */\n  getMonthName(month, months) {\n    if (!months) {\n      throw Error('missing 2nd parameter Months array')\n    }\n    if (typeof month === 'object') {\n      return months[this.getMonth(month)]\n    }\n    if (typeof month === 'number') {\n      return months[month]\n    }\n    throw TypeError('Invalid type')\n  },\n\n  /**\n   * Return an abbreviated version of the month\n   * @param {Number|Date} month\n   * @param {Array} monthsAbbr\n   * @return {String}\n   */\n  getMonthNameAbbr(month, monthsAbbr) {\n    if (!monthsAbbr) {\n      throw Error('missing 2nd parameter Months array')\n    }\n    if (typeof month === 'object') {\n      return monthsAbbr[this.getMonth(month)]\n    }\n    if (typeof month === 'number') {\n      return monthsAbbr[month]\n    }\n    throw TypeError('Invalid type')\n  },\n\n  /**\n   * Alternative get total number of days in month\n   * @param {Number} year\n   * @param {Number} month\n   * @return {Number}\n   */\n  // eslint-disable-next-line complexity\n  daysInMonth(year, month) {\n    if (/8|3|5|10/.test(month.toString())) {\n      return 30\n    }\n    if (month === 1) {\n      return (!(year % 4) && year % 100) || !(year % 400) ? 29 : 28\n    }\n    return 31\n  },\n\n  /**\n   * Get nth suffix for date\n   * @param {Number} day\n   * @return {String}\n   */\n  // eslint-disable-next-line complexity\n  getNthSuffix(day) {\n    switch (day) {\n      case 1:\n      case 21:\n      case 31:\n        return 'st'\n      case 2:\n      case 22:\n        return 'nd'\n      case 3:\n      case 23:\n        return 'rd'\n      default:\n        return 'th'\n    }\n  },\n\n  /**\n   * Formats date object\n   * @param {Date} date\n   * @param {String} formatStr\n   * @param {Object} translation\n   * @return {String}\n   */\n  formatDate(date, formatStr, translation = en) {\n    const year = this.getFullYear(date)\n    const month = this.getMonth(date) + 1\n    const day = this.getDate(date)\n\n    const matches = {\n      dd: `0${day}`.slice(-2),\n      d: day,\n      yyyy: year,\n      yy: String(year).slice(2),\n      MMMM: this.getMonthName(this.getMonth(date), translation.months),\n      MMM: this.getMonthNameAbbr(this.getMonth(date), translation.monthsAbbr),\n      MM: `0${month}`.slice(-2),\n      M: month,\n      o: this.getNthSuffix(this.getDate(date)),\n      E: this.getDayNameAbbr(date, translation.days),\n    }\n\n    const REGEX_FORMAT = /y{4}|y{2}|M{1,4}(?![aäe])|d{1,2}|o|E(?![eéi])/g\n    return formatStr.replace(REGEX_FORMAT, (match) => matches[match] || match)\n  },\n\n  /**\n   * makes date parseable\n   * to use with international dates\n   * @param {String} dateStr\n   * @param {String|Function} formatStr\n   * @param {Object} translation\n   * @param {Function} parser\n   * @return {Date | String}\n   */\n  // eslint-disable-next-line max-params,complexity,max-statements\n  parseDate(dateStr, formatStr, translation = en, parser = null) {\n    if (!(dateStr && formatStr)) {\n      return dateStr\n    }\n    if (typeof formatStr === 'function') {\n      if (!parser || typeof parser !== 'function') {\n        throw new Error(\n          'Parser needs to be a function if you are using a custom formatter',\n        )\n      }\n      return parser(dateStr)\n    }\n    const ymd = getParsedDate({\n      formatStr,\n      dateStr,\n      translation,\n    })\n\n    const dat = `${ymd.join('-')}${this.getTime()}`\n    if (Number.isNaN(Date.parse(dat))) {\n      return dateStr\n    }\n    return dat\n  },\n\n  getTime() {\n    const time = 'T00:00:00'\n    if (this.useUtc) {\n      return `${time}Z`\n    }\n    return time\n  },\n\n  /**\n   * Creates an array of dates for each day in between two dates.\n   * @param {Date} start\n   * @param {Date} end\n   * @return {Array}\n   */\n  createDateArray(start, end) {\n    const dates = []\n    let startTemp = start\n    while (startTemp <= end) {\n      dates.push(new Date(startTemp))\n      startTemp = this.setDate(\n        new Date(startTemp),\n        this.getDate(new Date(startTemp)) + 1,\n      )\n    }\n    return dates\n  },\n\n  /**\n   * Remove hours/minutes/seconds/milliseconds from a date object\n   * @param {Date} date\n   * @return {Date}\n   */\n  resetDateTime(date) {\n    return new Date(\n      this.useUtc ? date.setUTCHours(0, 0, 0, 0) : date.setHours(0, 0, 0, 0),\n    )\n  },\n\n  /**\n   * Return a new date object with hours/minutes/seconds/milliseconds removed.\n   * Defaults to today's date, if no parameter is provided\n   * @param {Date=} date\n   * @return {Date}\n   */\n  getNewDateObject(date) {\n    return date\n      ? this.resetDateTime(new Date(date))\n      : this.resetDateTime(new Date())\n  },\n}\n\nexport default (useUtc) => ({\n  ...utils,\n  useUtc,\n})\n","<script>\nexport default {\n  props: {\n    autofocus: {\n      type: Boolean,\n      default: false,\n    },\n    bootstrapStyling: {\n      type: Boolean,\n      default: false,\n    },\n    clearButton: {\n      type: Boolean,\n      default: false,\n    },\n    clearButtonIcon: {\n      type: String,\n      default: '',\n    },\n    calendarButton: {\n      type: Boolean,\n      default: false,\n    },\n    calendarButtonIcon: {\n      type: String,\n      default: '',\n    },\n    calendarButtonIconContent: {\n      type: String,\n      default: '',\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    format: {\n      type: [String, Function],\n      default: 'dd MMM yyyy',\n    },\n    id: {\n      type: String,\n      default: null,\n    },\n    inline: {\n      type: Boolean,\n      default: false,\n    },\n    inputClass: {\n      type: [String, Object, Array],\n      default: null,\n    },\n    maxlength: {\n      type: [Number, String],\n      default: null,\n    },\n    name: {\n      type: String,\n      default: null,\n    },\n    openDate: {\n      type: [String, Date, Number],\n      default: null,\n      validator: (val) =>\n        val === null ||\n        val instanceof Date ||\n        typeof val === 'string' ||\n        typeof val === 'number',\n    },\n    parser: {\n      type: Function,\n      default: null,\n    },\n    pattern: {\n      type: String,\n      default: null,\n    },\n    placeholder: {\n      type: String,\n      default: null,\n    },\n    refName: {\n      type: String,\n      default: '',\n    },\n    required: {\n      type: Boolean,\n      default: false,\n    },\n    showCalendarOnButtonClick: {\n      type: Boolean,\n      default: false,\n    },\n    showCalendarOnFocus: {\n      type: Boolean,\n      default: false,\n    },\n    tabindex: {\n      type: [Number, String],\n      default: null,\n    },\n    typeable: {\n      type: Boolean,\n      default: false,\n    },\n    useUtc: {\n      type: Boolean,\n      default: false,\n    },\n  },\n}\n</script>\n","function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\r\n    if (typeof shadowMode !== 'boolean') {\r\n        createInjectorSSR = createInjector;\r\n        createInjector = shadowMode;\r\n        shadowMode = false;\r\n    }\r\n    // Vue.extend constructor export interop.\r\n    const options = typeof script === 'function' ? script.options : script;\r\n    // render functions\r\n    if (template && template.render) {\r\n        options.render = template.render;\r\n        options.staticRenderFns = template.staticRenderFns;\r\n        options._compiled = true;\r\n        // functional template\r\n        if (isFunctionalTemplate) {\r\n            options.functional = true;\r\n        }\r\n    }\r\n    // scopedId\r\n    if (scopeId) {\r\n        options._scopeId = scopeId;\r\n    }\r\n    let hook;\r\n    if (moduleIdentifier) {\r\n        // server build\r\n        hook = function (context) {\r\n            // 2.3 injection\r\n            context =\r\n                context || // cached call\r\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\r\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\r\n            // 2.2 with runInNewContext: true\r\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n                context = __VUE_SSR_CONTEXT__;\r\n            }\r\n            // inject component styles\r\n            if (style) {\r\n                style.call(this, createInjectorSSR(context));\r\n            }\r\n            // register component module identifier for async chunk inference\r\n            if (context && context._registeredComponents) {\r\n                context._registeredComponents.add(moduleIdentifier);\r\n            }\r\n        };\r\n        // used by ssr in case component is cached and beforeCreate\r\n        // never gets called\r\n        options._ssrRegister = hook;\r\n    }\r\n    else if (style) {\r\n        hook = shadowMode\r\n            ? function (context) {\r\n                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\r\n            }\r\n            : function (context) {\r\n                style.call(this, createInjector(context));\r\n            };\r\n    }\r\n    if (hook) {\r\n        if (options.functional) {\r\n            // register for functional component in vue file\r\n            const originalRender = options.render;\r\n            options.render = function renderWithStyleInjection(h, context) {\r\n                hook.call(context);\r\n                return originalRender(h, context);\r\n            };\r\n        }\r\n        else {\r\n            // inject component registration as beforeCreate hook\r\n            const existing = options.beforeCreate;\r\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\r\n        }\r\n    }\r\n    return script;\r\n}\n\nexport default normalizeComponent;\n//# sourceMappingURL=normalize-component.mjs.map\n","<template>\n  <div :class=\"{ 'input-group': bootstrapStyling }\">\n    <slot name=\"beforeDateInput\" />\n    <!-- Calendar Button -->\n    <button\n      v-if=\"calendarButton\"\n      ref=\"calendarButton\"\n      class=\"vdp-datepicker__calendar-button\"\n      :class=\"{ 'btn input-group-prepend': bootstrapStyling }\"\n      data-test-calendar-button\n      :disabled=\"disabled\"\n      type=\"button\"\n      @click=\"toggle('calendarButton')\"\n      @focus=\"handleButtonFocus\"\n    >\n      <span :class=\"{ 'input-group-text': bootstrapStyling }\">\n        <slot name=\"calendarBtn\">\n          <i :class=\"calendarButtonIcon\">\n            {{ calendarButtonIconContent }}\n            <span v-if=\"!calendarButtonIcon\">&hellip;</span>\n          </i>\n        </slot>\n      </span>\n    </button>\n    <!-- Input -->\n    <input\n      :id=\"id\"\n      :ref=\"refName\"\n      autocomplete=\"off\"\n      :autofocus=\"autofocus\"\n      :class=\"computedInputClass\"\n      :clear-button=\"clearButton\"\n      data-test-input\n      :disabled=\"disabled\"\n      :maxlength=\"maxlength\"\n      :name=\"name\"\n      :pattern=\"pattern\"\n      :placeholder=\"placeholder\"\n      :readonly=\"!typeable\"\n      :required=\"required\"\n      :tabindex=\"tabindex\"\n      :type=\"inline ? 'hidden' : null\"\n      :value=\"formattedValue\"\n      @blur=\"handleInputBlur\"\n      @click=\"handleInputClick\"\n      @focus=\"handleInputFocus\"\n      @keydown.backspace=\"handleDelete\"\n      @keydown.delete=\"handleDelete\"\n      @keydown.down.prevent=\"handleKeydownDown\"\n      @keydown.enter.prevent=\"handleKeydownEnter\"\n      @keydown.esc.prevent=\"handleKeydownEscape\"\n      @keydown.space=\"handleKeydownSpace($event)\"\n      @keyup=\"handleKeyup($event)\"\n      @keyup.space=\"handleKeyupSpace($event)\"\n    />\n    <!-- Clear Button -->\n    <button\n      v-if=\"clearButton && selectedDate\"\n      class=\"vdp-datepicker__clear-button\"\n      :class=\"{ 'btn input-group-append': bootstrapStyling }\"\n      data-test-clear-button\n      :disabled=\"disabled\"\n      type=\"button\"\n      @click=\"clearDate\"\n    >\n      <span :class=\"{ 'input-group-text': bootstrapStyling }\">\n        <slot name=\"clearBtn\">\n          <i :class=\"clearButtonIcon\">\n            <span v-if=\"!clearButtonIcon\">&times;</span>\n          </i>\n        </slot>\n      </span>\n    </button>\n    <slot name=\"afterDateInput\" />\n  </div>\n</template>\n\n<script>\nimport makeDateUtils from '~/utils/DateUtils'\nimport inputProps from '~/mixins/inputProps.vue'\n\nexport default {\n  name: 'DateInput',\n  mixins: [inputProps],\n  props: {\n    isOpen: {\n      type: Boolean,\n      default: false,\n    },\n    selectedDate: {\n      type: Date,\n      default: null,\n    },\n    translation: {\n      type: Object,\n      default() {\n        return {}\n      },\n    },\n  },\n  data() {\n    return {\n      input: null,\n      isInputFocused: false,\n      shouldToggleOnFocus: false,\n      shouldToggleOnClick: true,\n      parsedDate: null,\n      typedDate: '',\n      utils: makeDateUtils(this.useUtc),\n    }\n  },\n  computed: {\n    computedInputClass() {\n      if (this.bootstrapStyling) {\n        if (typeof this.inputClass === 'string') {\n          return [this.inputClass, 'form-control'].join(' ')\n        }\n        return { 'form-control': true, ...this.inputClass }\n      }\n      return this.inputClass\n    },\n    formattedDate() {\n      if (!this.selectedDate) {\n        return null\n      }\n\n      return typeof this.format === 'function'\n        ? this.format(new Date(this.selectedDate))\n        : this.utils.formatDate(\n            new Date(this.selectedDate),\n            this.format,\n            this.translation,\n          )\n    },\n    formattedValue() {\n      if (!this.selectedDate) {\n        return null\n      }\n      if (this.typedDate.length) {\n        return this.typedDate\n      }\n      return this.formattedDate\n    },\n  },\n  watch: {\n    showCalendarOnFocus: {\n      immediate: true,\n      handler(showCalendarOnFocus) {\n        if (showCalendarOnFocus) {\n          this.shouldToggleOnFocus = !this.isOpen\n        }\n      },\n    },\n    isOpen(isOpen, wasOpen) {\n      this.$nextTick(() => {\n        if (this.showCalendarOnFocus) {\n          if (isOpen) {\n            this.shouldToggleOnFocus = false\n          }\n          if (wasOpen && !this.isInputFocused) {\n            this.shouldToggleOnFocus = true\n          }\n        }\n      })\n    },\n  },\n  mounted() {\n    this.input = this.$el.querySelector('input')\n  },\n  methods: {\n    /**\n     * Emits a `clear-date` event\n     */\n    clearDate() {\n      this.input.value = ''\n      this.$emit('clear-date')\n    },\n    /**\n     * Formats a typed date, or clears it if invalid\n     */\n    formatTypedDate() {\n      if (Number.isNaN(this.parsedDate)) {\n        this.input.value = ''\n        this.typedDate = ''\n      } else {\n        this.typedDate = this.formattedDate\n      }\n    },\n    /**\n     * Validate typedDate and emit a `blur` event\n     */\n    handleInputBlur() {\n      if (this.showCalendarOnFocus && !this.isOpen) {\n        this.shouldToggleOnFocus = true\n      }\n\n      if (this.typeable) {\n        this.formatTypedDate()\n      }\n      this.isInputFocused = false\n      this.$emit('blur')\n    },\n    /**\n     * Resets `shouldToggleOnFocus` to true\n     */\n    handleButtonFocus() {\n      if (this.showCalendarOnFocus) {\n        this.shouldToggleOnFocus = true\n      }\n    },\n    /**\n     * Clears the calendar when the `delete` or `backspace` key is pressed\n     */\n    handleDelete() {\n      if (!this.typeable && this.selectedDate) {\n        this.clearDate()\n      }\n    },\n    /**\n     * Toggles the calendar (unless `show-calendar-on-button-click` is true)\n     */\n    handleInputClick() {\n      if (this.showCalendarOnButtonClick) return\n\n      if (this.shouldToggleOnClick) {\n        this.toggle()\n      }\n    },\n    /**\n     * Emits a `focus` event and opens the calendar when `show-calendar-on-focus` is true\n     */\n    handleInputFocus() {\n      this.isInputFocused = true\n\n      if (!this.isOpen && this.shouldToggleOnFocus) {\n        this.shouldToggleOnClick = false\n      }\n\n      if (this.shouldToggleOnFocus && !this.isOpen) {\n        this.$emit('open')\n\n        setTimeout(() => {\n          this.shouldToggleOnClick = true\n        }, 300)\n      }\n\n      this.$emit('focus')\n    },\n    /**\n     * Opens the calendar, or sets the focus to the next focusable element down\n     */\n    handleKeydownDown() {\n      if (!this.isOpen) {\n        this.$emit('open')\n      }\n\n      if (!this.typeable) {\n        return\n      }\n\n      this.$emit('set-focus', ['prev', 'up', 'next', 'tabbableCell'])\n    },\n    /**\n     * Formats a typed date and closes the calendar\n     */\n    handleKeydownEnter() {\n      if (!this.typeable) {\n        return\n      }\n\n      this.formatTypedDate()\n\n      if (this.isOpen) {\n        this.$emit('close')\n      }\n    },\n    /**\n     * Closes the calendar\n     */\n    handleKeydownEscape() {\n      if (this.isOpen) {\n        this.$emit('close')\n      }\n    },\n    /**\n     * Prevents scrolling when not typeable\n     */\n    handleKeydownSpace(event) {\n      if (!this.typeable) {\n        event.preventDefault()\n      }\n    },\n    /**\n     * Parses a typed date and submits it, if valid\n     * @param  {object}  event Used to exclude certain keystrokes\n     */\n    handleKeyup(event) {\n      if (\n        !this.typeable ||\n        [\n          'Shift',\n          'Tab',\n          'ArrowUp',\n          'ArrowDown',\n          'ArrowLeft',\n          'ArrowRight',\n        ].includes(event.key)\n      ) {\n        return\n      }\n\n      if (this.input.value === '') {\n        this.$emit('typed-date', null)\n        return\n      }\n\n      this.parsedDate = Date.parse(\n        this.utils.parseDate(\n          this.input.value,\n          this.format,\n          this.translation,\n          this.parser,\n        ),\n      )\n\n      if (!Number.isNaN(this.parsedDate)) {\n        this.typedDate = this.input.value\n        this.$emit('typed-date', new Date(this.parsedDate))\n      }\n    },\n    /**\n     * Toggles the calendar unless a typed date has been entered or `show-calendar-on-button-click` is true\n     */\n    handleKeyupSpace(event) {\n      if (this.typeable) {\n        if (this.input.value === '') {\n          this.toggle()\n        }\n        return\n      }\n\n      event.preventDefault()\n      if (!this.showCalendarOnButtonClick) {\n        this.toggle()\n      }\n    },\n    /**\n     * Opens or closes the calendar\n     */\n    toggle(calendarButton) {\n      if (this.isOpen) {\n        this.$emit('set-focus', [calendarButton || 'input'])\n      }\n\n      this.$emit(this.isOpen ? 'close' : 'open')\n    },\n  },\n}\n</script>\n","const cellUtils = {\n  configExists(obj) {\n    return typeof obj !== 'undefined' && Object.keys(obj).length > 0\n  },\n\n  isDefined(obj, prop) {\n    return this.configExists(obj) && typeof obj[prop] !== 'undefined'\n  },\n\n  hasArray(obj, prop) {\n    return this.isDefined(obj, prop) && obj[prop].length > 0\n  },\n\n  hasDate(obj, prop) {\n    return this.isDefined(obj, prop) && this.utils.isValidDate(obj[prop])\n  },\n\n  dayMonthYear(obj, prop) {\n    const { utils } = this\n    const hasDate = this.hasDate(obj, prop)\n\n    if (!hasDate) {\n      return {\n        day: undefined,\n        month: undefined,\n        year: undefined,\n      }\n    }\n\n    const d = obj[prop]\n\n    return {\n      day: utils.getDate(d),\n      month: utils.getMonth(d),\n      year: utils.getFullYear(d),\n    }\n  },\n}\n\nexport default (utils) => ({\n  ...cellUtils,\n  utils,\n})\n","/* eslint-disable no-underscore-dangle */\n\nimport makeCellUtils from './cellUtils'\n\nexport default class DisabledDate {\n  constructor(utils, disabledDates) {\n    this._utils = utils\n    this._disabledDates = disabledDates\n  }\n\n  get config() {\n    const disabledDates = this._disabledDates\n    const utils = makeCellUtils(this._utils)\n\n    return {\n      exists: utils.configExists(disabledDates),\n      to: utils.dayMonthYear(disabledDates, 'to'),\n      from: utils.dayMonthYear(disabledDates, 'from'),\n      has: {\n        customPredictor: utils.isDefined(disabledDates, 'customPredictor'),\n        daysOfMonth: utils.hasArray(disabledDates, 'daysOfMonth'),\n        daysOfWeek: utils.hasArray(disabledDates, 'days'),\n        from: utils.hasDate(disabledDates, 'from'),\n        ranges: utils.hasArray(disabledDates, 'ranges'),\n        specificDates: utils.hasArray(disabledDates, 'dates'),\n        to: utils.hasDate(disabledDates, 'to'),\n      },\n    }\n  }\n\n  daysInMonth(date) {\n    const utils = this._utils\n    const month = utils.getMonth(date)\n    const year = utils.getFullYear(date)\n\n    return utils.daysInMonth(year, month)\n  }\n\n  isDateDisabledVia(date) {\n    const disabledDates = this._disabledDates\n    const { has } = this.config\n\n    return {\n      to: () => {\n        return has.to && date < disabledDates.to\n      },\n      from: () => {\n        return has.from && date > disabledDates.from\n      },\n      range: () => {\n        if (!has.ranges) return false\n\n        const { ranges } = disabledDates\n        const u = makeCellUtils(this._utils)\n\n        return ranges.some((thisRange) => {\n          const hasFrom = u.isDefined(thisRange, 'from')\n          const hasTo = u.isDefined(thisRange, 'to')\n\n          return (\n            hasFrom && hasTo && date < thisRange.to && date > thisRange.from\n          )\n        })\n      },\n      customPredictor: () => {\n        return has.customPredictor && disabledDates.customPredictor(date)\n      },\n      specificDate: () => {\n        if (!has.specificDates) return false\n\n        return disabledDates.dates.some((d) => {\n          return this._utils.compareDates(date, d)\n        })\n      },\n      daysOfWeek: () => {\n        if (!has.daysOfWeek) return false\n\n        return disabledDates.days.indexOf(this._utils.getDay(date)) !== -1\n      },\n      daysOfMonth: () => {\n        if (!has.daysOfMonth) return false\n\n        return (\n          disabledDates.daysOfMonth.indexOf(this._utils.getDate(date)) !== -1\n        )\n      },\n    }\n  }\n\n  isMonthDisabledVia(date) {\n    const { from, has, to } = this.config\n    const month = this._utils.getMonth(date)\n    const year = this._utils.getFullYear(date)\n\n    return {\n      to: () => {\n        const isYearInPast = has.to && year < to.year\n\n        if (isYearInPast) {\n          return true\n        }\n\n        return has.to && month < to.month && year <= to.year\n      },\n      from: () => {\n        const isYearInFuture = has.from && year > from.year\n\n        if (isYearInFuture) {\n          return true\n        }\n\n        return has.from && month > from.month && year >= from.year\n      },\n    }\n  }\n\n  isYearDisabledVia(date) {\n    const { from, has, to } = this.config\n    const year = this._utils.getFullYear(date)\n\n    return {\n      to: () => {\n        return has.to && year < to.year\n      },\n      from: () => {\n        return has.from && year > from.year\n      },\n    }\n  }\n\n  /**\n   * Checks if the given date should be disabled\n   * @param {Date} date\n   * @return {Boolean}\n   */\n  // eslint-disable-next-line complexity,max-statements\n  isDateDisabled(date) {\n    if (!this.config.exists) return false\n\n    const isDisabledVia = this.isDateDisabledVia(date)\n\n    return (\n      isDisabledVia.to() ||\n      isDisabledVia.from() ||\n      isDisabledVia.range() ||\n      isDisabledVia.specificDate() ||\n      isDisabledVia.daysOfWeek() ||\n      isDisabledVia.daysOfMonth() ||\n      isDisabledVia.customPredictor()\n    )\n  }\n\n  /**\n   * Checks if the given month should be disabled\n   * @param {Date} date\n   * @return {Boolean}\n   */\n  // eslint-disable-next-line complexity,max-statements\n  isMonthDisabled(date) {\n    const { config } = this\n    const isDisabledVia = this.isMonthDisabledVia(date)\n\n    if (!config.exists) {\n      return false\n    }\n\n    if (isDisabledVia.to() || isDisabledVia.from()) {\n      return true\n    }\n\n    // now we have to check each day of the month\n    for (let i = 1; i <= this.daysInMonth(date); i += 1) {\n      const dayDate = new Date(date)\n      dayDate.setDate(i)\n      // if at least one day of this month is NOT disabled,\n      // we can conclude that this month SHOULD be selectable\n      if (!this.isDateDisabled(dayDate)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Checks if the given year should be disabled\n   * @param {Date} date\n   * @return {Boolean}\n   */\n  // eslint-disable-next-line complexity,max-statements\n  isYearDisabled(date) {\n    const { config } = this\n    const isDisabledVia = this.isYearDisabledVia(date)\n\n    if (!config.exists) {\n      return false\n    }\n\n    if (isDisabledVia.to() || isDisabledVia.from()) {\n      return true\n    }\n\n    // now we have to check each month of the year\n    for (let i = 0; i < 12; i += 1) {\n      const monthDate = new Date(date)\n      monthDate.setMonth(i)\n      // if at least one month of this year is NOT disabled,\n      // we can conclude that this year SHOULD be selectable\n      if (!this.isMonthDisabled(monthDate)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  getEarliestPossibleDate(date) {\n    if (!date) {\n      return null\n    }\n    const utils = this._utils\n\n    if (this.isDateDisabled(date)) {\n      const nextDate = new Date(\n        utils.getFullYear(date),\n        utils.getMonth(date),\n        utils.getDate(date) + 1,\n      )\n\n      return this.getEarliestPossibleDate(nextDate)\n    }\n\n    return date\n  }\n\n  getLatestPossibleDate(date) {\n    if (!date) {\n      return null\n    }\n    const utils = this._utils\n\n    if (this.isDateDisabled(date)) {\n      const nextDate = new Date(\n        utils.getFullYear(date),\n        utils.getMonth(date),\n        utils.getDate(date) - 1,\n      )\n\n      return this.getLatestPossibleDate(nextDate)\n    }\n\n    return date\n  }\n}\n","<script>\nexport default {\n  data() {\n    return {\n      allElements: [],\n      focus: {\n        delay: 0,\n        refs: [],\n      },\n      inlineTabbableCell: null,\n      isActive: false,\n      isRevertingToOpenDate: false,\n      navElements: [],\n      navElementsFocusedIndex: 0,\n      resetTabbableCell: false,\n      tabbableCell: null,\n      transitionName: '',\n    }\n  },\n  computed: {\n    fallbackElementsToFocus() {\n      const elements = ['tabbableCell', 'prev', 'next']\n\n      if (this.typeable) {\n        elements.unshift('input')\n      }\n\n      return elements\n    },\n    focusedDateTimestamp() {\n      const pageDate = new Date(this.pageTimestamp)\n\n      if (this.hasClass(this.tabbableCell, 'day')) {\n        return this.utils.setDate(pageDate, this.tabbableCell.innerHTML.trim())\n      }\n\n      if (this.hasClass(this.tabbableCell, 'month')) {\n        return this.utils.setMonth(pageDate, this.tabbableCellId)\n      }\n\n      const fullYear = this.utils.getFullYear(pageDate) - 1\n      return this.utils.setFullYear(pageDate, fullYear + this.tabbableCellId)\n    },\n    tabbableCellId() {\n      return (\n        this.tabbableCell && Number(this.tabbableCell.getAttribute('data-id'))\n      )\n    },\n  },\n  methods: {\n    /**\n     * Returns true, unless tabbing should be focus-trapped\n     * @return {Boolean}\n     */\n    allowNormalTabbing(event) {\n      if (!this.isOpen) {\n        return true\n      }\n\n      return this.isTabbingAwayFromInlineDatepicker(event)\n    },\n    /**\n     * Focuses the first non-disabled element found in the `focus.refs` array and sets `navElementsFocusedIndex`\n     */\n    applyFocus() {\n      const focusRefs = [...this.focus.refs, ...this.fallbackElementsToFocus]\n\n      for (let i = 0; i < focusRefs.length; i += 1) {\n        const element = this.getElementByRef(focusRefs[i])\n\n        if (element && !element.getAttribute('disabled')) {\n          element.focus()\n          this.setNavElementsFocusedIndex()\n          break\n        }\n      }\n    },\n    /**\n     * Ensures the most recently focused tabbable cell is focused when tabbing backwards to an inline calendar\n     * If no element has previously been focused, the tabbable cell is reset and focused\n     */\n    focusInlineTabbableCell() {\n      if (this.inlineTabbableCell) {\n        this.inlineTabbableCell.focus()\n\n        return\n      }\n\n      this.resetTabbableCell = true\n      this.setTabbableCell()\n      this.tabbableCell.focus()\n      this.resetTabbableCell = false\n    },\n    /**\n     * Returns the currently focused cell element, if there is one...\n     */\n    getActiveCell() {\n      const isActiveElementACell = this.hasClass(document.activeElement, 'cell')\n      const isOnSameView = this.hasClass(document.activeElement, this.view)\n\n      if (isActiveElementACell && isOnSameView && !this.resetTabbableCell) {\n        return document.activeElement\n      }\n\n      return null\n    },\n    /**\n     * Finds an element by its `ref` attribute\n     * @param {string} ref        The `ref` name of the wanted element\n     * @returns {HTMLElement|Vue} A Vue element\n     */\n    // eslint-disable-next-line complexity,max-statements\n    getElementByRef(ref) {\n      if (ref === 'tabbableCell') {\n        return this.tabbableCell\n      }\n      if (ref === 'input') {\n        return this.$refs.dateInput && this.$refs.dateInput.$refs[this.refName]\n      }\n      if (ref === 'calendarButton') {\n        return this.$refs.dateInput.$refs.calendarButton\n      }\n      if (ref === 'openDate') {\n        return this.$refs.picker.$refs.cells.$refs.openDate[0]\n      }\n      if (this.showHeader) {\n        if (ref === 'up') {\n          return this.$refs.picker && this.$refs.picker.$refs.up.$el\n        }\n        return (\n          this.$refs.picker &&\n          this.$refs.picker.$refs.pickerHeader &&\n          this.$refs.picker.$refs.pickerHeader.$refs[ref]\n        )\n      }\n      return null\n    },\n    /**\n     * Returns an array of all HTML elements which should be focus-trapped in the calendarFooter slot\n     * @returns {Array}   An array of HTML elements\n     */\n    getElementsFromCalendarFooter() {\n      const footerSlotIndex = this.hasSlot('beforeCalendarHeader') ? 2 : 1\n\n      return this.getFocusableElements(\n        this.$refs.view.children[footerSlotIndex],\n      )\n    },\n    /**\n     * Returns an array of all HTML elements which should be focus-trapped in the specified slot\n     * @returns {Array}   An array of HTML elements\n     */\n    getElementsFromSlot(slotName) {\n      if (!this.hasSlot(slotName)) {\n        return []\n      }\n\n      if (slotName === 'beforeCalendarHeader') {\n        return this.getFocusableElements(this.$refs.view.children[0])\n      }\n\n      if (slotName === 'calendarFooter') {\n        return this.getElementsFromCalendarFooter()\n      }\n\n      const isBeforeHeader = slotName.indexOf('beforeCalendarHeader') > -1\n      const picker = this.$refs.picker.$el\n      const index = isBeforeHeader ? 0 : picker.children.length - 1\n\n      return this.getFocusableElements(picker.children[index])\n    },\n    /**\n     * Returns an array of all HTML elements which should be focus-trapped in the header\n     * @returns {Array}   An array of HTML elements\n     */\n    getElementsFromHeader() {\n      const view = this.ucFirst(this.view)\n      const beforeCalendarSlotName = `beforeCalendarHeader${view}`\n      const picker = this.$refs.picker.$el\n      const index = this.hasSlot(beforeCalendarSlotName) ? 1 : 0\n      const fragment = picker.children[index]\n\n      return this.showHeader ? this.getFocusableElements(fragment) : []\n    },\n    /**\n     * Returns an array of focusable elements in a given HTML fragment\n     * @param   {Element} fragment The HTML fragment to search\n     * @returns {Array}\n     */\n    getFocusableElements(fragment) {\n      const navNodeList = fragment.querySelectorAll(\n        'button:enabled, [href], input:not([type=hidden]), select:enabled, textarea:enabled, [tabindex]:not([tabindex=\"-1\"])',\n      )\n\n      return [...Array.prototype.slice.call(navNodeList)]\n    },\n    /**\n     * Returns the input element (when typeable)\n     * @returns {Element}\n     */\n    getInputField() {\n      if (!this.typeable || this.inline) {\n        return null\n      }\n\n      return this.$refs.dateInput.$refs[this.refName]\n    },\n    /**\n     * Sets `datepickerId` (as a global) and keeps track of focusable elements\n     */\n    handleFocusIn() {\n      document.datepickerId = this.datepickerId\n\n      this.isActive = true\n      this.setInlineTabbableCell()\n      this.setAllElements()\n      this.setNavElements()\n    },\n    /**\n     * Sets the datepicker's `isActive` state to false\n     */\n    handleFocusOut() {\n      this.isActive = false\n    },\n    /**\n     * Returns true if the user has arrowed to a new page\n     * @return {Boolean}\n     */\n    hasArrowedToNewPage() {\n      return this.focus.refs && this.focus.refs[0] === 'arrow-to-cell'\n    },\n    /**\n     * Returns true if the calendar has been passed the given slot\n     * @param  {String} slotName The name of the slot\n     * @return {Boolean}\n     */\n    hasSlot(slotName) {\n      return !!this.$slots[slotName]\n    },\n    /**\n     * Returns true if the user is tabbing away from an inline datepicker\n     * @return {Boolean}\n     */\n    isTabbingAwayFromInlineDatepicker(event) {\n      if (!this.inline) {\n        return false\n      }\n\n      if (this.isTabbingAwayFromFirstNavElement(event)) {\n        this.tabAwayFromFirstElement()\n\n        return true\n      }\n\n      if (this.isTabbingAwayFromLastNavElement(event)) {\n        this.tabAwayFromLastElement()\n\n        return true\n      }\n\n      return false\n    },\n    /**\n     * Used for inline calendars; returns true if the user tabs backwards from the first focusable element\n     * @param  {object}  event Used to determine whether we are tabbing forwards or backwards\n     * @return {Boolean}\n     */\n    isTabbingAwayFromFirstNavElement(event) {\n      if (!event.shiftKey) {\n        return false\n      }\n\n      const firstNavElement = this.navElements[0]\n\n      return document.activeElement === firstNavElement\n    },\n    /**\n     * Used for inline calendars; returns true if the user tabs forwards from the last focusable element\n     * @param  {object}  event Used to determine whether we are tabbing forwards or backwards\n     * @return {Boolean}\n     */\n    isTabbingAwayFromLastNavElement(event) {\n      if (event.shiftKey) {\n        return false\n      }\n\n      const lastNavElement = this.navElements[this.navElements.length - 1]\n\n      return document.activeElement === lastNavElement\n    },\n    /**\n     * Resets the focus to the open date\n     */\n    resetFocusToOpenDate() {\n      this.focus.refs = ['openDate']\n      this.setTransitionAndFocusDelay(\n        this.focusedDateTimestamp,\n        this.computedOpenDate,\n      )\n\n      if (!this.isMinimumView) {\n        this.isRevertingToOpenDate = true\n        this.view = this.minimumView\n      }\n\n      this.setPageDate(this.computedOpenDate)\n      this.reviewFocus()\n    },\n    /**\n     * Sets the correct focus on next tick\n     */\n    reviewFocus() {\n      if (this.hasArrowedToNewPage()) {\n        return\n      }\n\n      this.tabbableCell = null\n      this.resetTabbableCell = true\n\n      this.$nextTick(() => {\n        this.setNavElements()\n\n        setTimeout(() => {\n          this.applyFocus()\n        }, this.focus.delay)\n\n        this.resetTabbableCell = false\n      })\n    },\n    /**\n     * Stores the current tabbableCell of an inline datepicker\n     * N.B. This is used when tabbing back (shift + tab) to an inline calendar from further down the page\n     */\n    setInlineTabbableCell() {\n      if (!this.inline) {\n        return\n      }\n\n      this.inlineTabbableCell = this.tabbableCell\n    },\n    /**\n     * Sets the direction of the slide transition and whether or not to delay application of the focus\n     * @param {Date|Number} startDate     The date from which to measure\n     * @param {Date|Number} endDate       Is this before or after the startDate? And is it on the same page?\n     */\n    setTransitionAndFocusDelay(startDate, endDate) {\n      const startPageDate = this.utils.setDate(new Date(startDate), 1)\n      const endPageDate = this.utils.setDate(new Date(endDate), 1)\n      const isInTheFuture = startPageDate < endPageDate\n\n      if (this.isMinimumView) {\n        this.focus.delay = isInTheFuture ? this.slideDuration : 0\n      } else {\n        this.focus.delay = 0\n      }\n\n      this.setTransitionName(endDate - startDate)\n    },\n    /**\n     * Records all focusable elements (so that we know whether any element in the datepicker is focused)\n     */\n    setAllElements() {\n      this.allElements = this.getFocusableElements(this.$refs.datepicker)\n\n      if (this.appendToBody) {\n        this.allElements = this.allElements.concat(\n          this.getFocusableElements(this.$refs.popup.$el),\n        )\n      }\n    },\n    /**\n     * Set the focus\n     * @param {Array} refs An array of `refs` to focus (in order of preference)\n     */\n    setFocus(refs) {\n      this.focus.refs = refs\n      this.applyFocus()\n    },\n    /**\n     * Determines which elements in datepicker should be focus-trapped\n     */\n    setNavElements() {\n      if (!this.view) return\n\n      this.updateTabbableCell()\n\n      const view = this.ucFirst(this.view)\n\n      this.navElements = [\n        this.getElementsFromSlot('beforeDateInput'),\n        this.getInputField(),\n        this.getElementsFromSlot('afterDateInput'),\n        this.getElementsFromSlot('beforeCalendarHeader'),\n        this.getElementsFromSlot(`beforeCalendarHeader${view}`),\n        this.getElementsFromHeader(),\n        this.tabbableCell,\n        this.getElementsFromSlot(`calendarFooter${view}`),\n        this.getElementsFromSlot('calendarFooter'),\n      ]\n        .filter((item) => !!item)\n        .reduce((acc, val) => acc.concat(val), [])\n    },\n    /**\n     * Keeps track of the currently focused index in the navElements array\n     */\n    setNavElementsFocusedIndex() {\n      for (let i = 0; i < this.navElements.length; i += 1) {\n        if (document.activeElement === this.navElements[i]) {\n          this.navElementsFocusedIndex = i\n          return\n        }\n      }\n\n      this.navElementsFocusedIndex = 0\n    },\n    /**\n     * Sets the focus-trapped cell in the picker\n     */\n    // eslint-disable-next-line complexity\n    setTabbableCell() {\n      if (!this.$refs.picker || !this.$refs.picker.$refs.cells) {\n        return\n      }\n\n      const pickerCells = this.$refs.picker.$refs.cells.$el\n\n      this.tabbableCell =\n        this.getActiveCell() ||\n        pickerCells.querySelector('button.selected:not(.muted):enabled') ||\n        pickerCells.querySelector('button.open:not(.muted):enabled') ||\n        pickerCells.querySelector('button.today:not(.muted):enabled') ||\n        pickerCells.querySelector('button.cell:not(.muted):enabled')\n    },\n    /**\n     * Sets the direction of the slide transition\n     * @param {Number} plusOrMinus Positive for the future; negative for the past\n     */\n    setTransitionName(plusOrMinus) {\n      const isInTheFuture = plusOrMinus > 0\n\n      if (this.isRtl) {\n        this.transitionName = isInTheFuture ? 'slide-left' : 'slide-right'\n      } else {\n        this.transitionName = isInTheFuture ? 'slide-right' : 'slide-left'\n      }\n    },\n    /**\n     * Focuses the first focusable element in the datepicker, so that the previous element on the page will be tabbed to\n     */\n    tabAwayFromFirstElement() {\n      const firstElement = this.allElements[0]\n\n      firstElement.focus()\n\n      this.tabbableCell = this.inlineTabbableCell\n    },\n    /**\n     * Focuses the last focusable element in the datepicker, so that the next element on the page will be tabbed to\n     */\n    tabAwayFromLastElement() {\n      const lastElement = this.allElements[this.allElements.length - 1]\n\n      lastElement.focus()\n\n      this.tabbableCell = this.inlineTabbableCell\n    },\n    /**\n     * Tab backwards through the focus-trapped elements\n     */\n    tabBackwards() {\n      this.navElementsFocusedIndex -= 1\n\n      if (this.navElementsFocusedIndex < 0) {\n        this.navElementsFocusedIndex = this.navElements.length - 1\n      }\n\n      this.navElements[this.navElementsFocusedIndex].focus()\n    },\n    /**\n     * Tab forwards through the focus-trapped elements\n     */\n    tabForwards() {\n      this.navElementsFocusedIndex += 1\n\n      if (this.navElementsFocusedIndex >= this.navElements.length) {\n        this.navElementsFocusedIndex = 0\n      }\n\n      this.navElements[this.navElementsFocusedIndex].focus()\n    },\n    /**\n     * Tab through the focus-trapped elements\n     * @param event\n     */\n    tabThroughNavigation(event) {\n      if (this.allowNormalTabbing(event)) {\n        return\n      }\n\n      event.preventDefault()\n\n      if (event.shiftKey) {\n        this.tabBackwards()\n      } else {\n        this.tabForwards()\n      }\n    },\n    /**\n     * Special cases for when tabbing to an inline datepicker\n     */\n    tabToCorrectInlineCell() {\n      const lastElement = this.allElements[this.allElements.length - 1]\n      const isACell = this.hasClass(lastElement, 'cell')\n      const isLastElementFocused = document.activeElement === lastElement\n\n      // If there are no focusable elements in the footer slots and the inline datepicker has been tabbed to (backwards)\n      if (isACell && isLastElementFocused) {\n        this.focusInlineTabbableCell()\n        return\n      }\n\n      // If `show-header` is false and the inline datepicker has been tabbed to (forwards)\n      this.$nextTick(() => {\n        const isFirstCell =\n          document.activeElement.getAttribute('data-id') === '0'\n\n        if (isFirstCell) {\n          this.focusInlineTabbableCell()\n        }\n      })\n    },\n    /**\n     * Update which cell in the picker should be focus-trapped\n     */\n    updateTabbableCell() {\n      const isActiveElementACell = this.hasClass(document.activeElement, 'cell')\n      const needToUpdate = !this.tabbableCell || isActiveElementACell\n\n      if (needToUpdate) {\n        this.setTabbableCell()\n      }\n    },\n  },\n}\n</script>\n","<template>\n  <header>\n    <button\n      ref=\"prev\"\n      class=\"prev\"\n      :class=\"{ btn: bootstrapStyling, rtl: isRtl }\"\n      data-test-previous-button\n      :disabled=\"isPreviousDisabled\"\n      type=\"button\"\n      @click.stop=\"$emit('page-change', previousPage)\"\n      @keydown.down.prevent=\"focusTabbableCell\"\n      @keydown.up.prevent=\"$emit('focus-input')\"\n      @keydown.left.prevent=\"arrowLeftPrev\"\n      @keydown.right.prevent=\"arrowRightPrev\"\n    >\n      <slot name=\"prevIntervalBtn\">\n        <span class=\"default\">&lt;</span>\n      </slot>\n    </button>\n    <slot />\n    <button\n      ref=\"next\"\n      class=\"next\"\n      :class=\"{ btn: bootstrapStyling, rtl: isRtl }\"\n      data-test-next-button\n      :disabled=\"isNextDisabled\"\n      type=\"button\"\n      @click.stop=\"$emit('page-change', nextPage)\"\n      @keydown.down.prevent=\"focusTabbableCell\"\n      @keydown.up.prevent=\"$emit('focus-input')\"\n      @keydown.left.prevent=\"arrowLeftNext\"\n      @keydown.right.prevent=\"arrowRightNext\"\n    >\n      <slot name=\"nextIntervalBtn\">\n        <span class=\"default\">&gt;</span>\n      </slot>\n    </button>\n  </header>\n</template>\n\n<script>\nexport default {\n  name: 'PickerHeader',\n  props: {\n    bootstrapStyling: {\n      type: Boolean,\n      default: false,\n    },\n    isNextDisabled: {\n      type: Boolean,\n      required: true,\n    },\n    isPreviousDisabled: {\n      type: Boolean,\n      required: true,\n    },\n    isRtl: {\n      type: Boolean,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      previousPage: { incrementBy: -1, focusRefs: ['prev'] },\n      nextPage: { incrementBy: 1, focusRefs: ['next'] },\n    }\n  },\n  methods: {\n    /**\n     * Changes the page, or sets focus to the adjacent button\n     */\n    arrowLeftPrev() {\n      if (this.isRtl) {\n        this.$emit('set-focus', ['up', 'next', 'tabbableCell'])\n        return\n      }\n      this.$emit('page-change', this.previousPage)\n    },\n    /**\n     * Changes the page, or sets focus to the adjacent button\n     */\n    arrowRightPrev() {\n      if (this.isRtl) {\n        this.$emit('page-change', this.previousPage)\n        return\n      }\n      this.$emit('set-focus', ['up', 'next', 'tabbableCell'])\n    },\n    /**\n     * Changes the page, or sets focus to the adjacent button\n     */\n    arrowLeftNext() {\n      if (this.isRtl) {\n        this.$emit('page-change', this.nextPage)\n        return\n      }\n      this.$emit('set-focus', ['up', 'prev', 'tabbableCell'])\n    },\n    /**\n     * Changes the page, or sets focus to the adjacent button\n     */\n    arrowRightNext() {\n      if (this.isRtl) {\n        this.$emit('set-focus', ['up', 'prev', 'tabbableCell'])\n        return\n      }\n      this.$emit('page-change', this.nextPage)\n    },\n    focusTabbableCell() {\n      this.$emit('set-focus', ['tabbableCell'])\n    },\n  },\n}\n</script>\n","<script>\nimport PickerHeader from '~/components/PickerHeader.vue'\nimport makeDateUtils from '~/utils/DateUtils'\nimport DisabledDate from '~/utils/DisabledDate'\n\nexport default {\n  components: { PickerHeader },\n  inheritAttrs: false,\n  props: {\n    bootstrapStyling: {\n      type: Boolean,\n      default: false,\n    },\n    disabledDates: {\n      type: Object,\n      default() {\n        return {}\n      },\n    },\n    isRtl: {\n      type: Boolean,\n      default: false,\n    },\n    isTypeable: {\n      type: Boolean,\n      default: false,\n    },\n    isUpDisabled: {\n      type: Boolean,\n      default: false,\n    },\n    isMinimumView: {\n      type: Boolean,\n      default: true,\n    },\n    openDate: {\n      type: [String, Date, Number],\n      default: null,\n      validator: (val) =>\n        val === null ||\n        val instanceof Date ||\n        typeof val === 'string' ||\n        typeof val === 'number',\n    },\n    pageDate: {\n      type: Date,\n      default: null,\n    },\n    selectedDate: {\n      type: Date,\n      default: null,\n    },\n    showHeader: {\n      type: Boolean,\n      default: true,\n    },\n    slideDuration: {\n      type: Number,\n      default: 250,\n    },\n    tabbableCellId: {\n      type: Number,\n      default: null,\n    },\n    transitionName: {\n      type: String,\n      default: '',\n    },\n    translation: {\n      type: Object,\n      default() {\n        return {}\n      },\n    },\n    useUtc: {\n      type: Boolean,\n      default: false,\n    },\n    view: {\n      type: String,\n      default: 'day',\n    },\n  },\n  data() {\n    return {\n      utils: makeDateUtils(this.useUtc),\n    }\n  },\n  computed: {\n    /**\n     * A look-up object created from 'disabledDates' prop\n     * @return {Object}\n     */\n    disabledConfig() {\n      return new DisabledDate(this.utils, this.disabledDates).config\n    },\n    earliestPossibleDate() {\n      return new DisabledDate(\n        this.utils,\n        this.disabledDates,\n      ).getEarliestPossibleDate(this.disabledDates.to)\n    },\n    latestPossibleDate() {\n      return new DisabledDate(\n        this.utils,\n        this.disabledDates,\n      ).getLatestPossibleDate(this.disabledDates.from)\n    },\n    /**\n     * Returns the current page's full year as an integer.\n     * @return {Number}\n     */\n    pageYear() {\n      return this.utils.getFullYear(this.pageDate)\n    },\n  },\n  methods: {\n    /**\n     * Used when an arrow key press would cause the focus to land on a disabled date\n     * @param {Object} options\n     */\n    addMoreSteps(options) {\n      if (options.stepsRemaining <= 0 && Math.abs(options.delta) > 1) {\n        return Math.abs(options.delta)\n      }\n      return options.stepsRemaining\n    },\n    /**\n     * Changes the page up or down\n     * @param {Number} incrementBy\n     * @param {[String]} focusRefs\n     */\n    changePage({ incrementBy, focusRefs }) {\n      const { pageDate, utils } = this\n      const units =\n        this.view === 'year' ? incrementBy * this.yearRange : incrementBy\n\n      this.$emit('set-transition-name', incrementBy)\n\n      if (this.view === 'day') {\n        utils.setMonth(pageDate, utils.getMonth(pageDate) + units)\n      } else {\n        utils.setFullYear(pageDate, utils.getFullYear(pageDate) + units)\n      }\n\n      this.$emit('page-change', { focusRefs, pageDate })\n    },\n    /**\n     * Changes the page and focuses the cell that is being 'arrowed' to\n     * @param {Object} options\n     */\n    changePageAndSetFocus(options) {\n      const { delta } = options\n      const isPageDisabled =\n        (delta > 0 && this.isNextDisabled) ||\n        (delta < 0 && this.isPreviousDisabled)\n\n      if (isPageDisabled) {\n        return\n      }\n\n      this.changePage({\n        incrementBy: Math.sign(delta),\n        focusRefs: ['arrow-to-cell'],\n      })\n\n      this.$nextTick(() => {\n        this.setFocusOnNewPage(options)\n      })\n    },\n    /**\n     * Focuses the input field, if typeable\n     */\n    focusInput() {\n      if (this.isTypeable) {\n        this.$emit('set-focus', ['input'])\n      }\n    },\n    /**\n     * Returns the element that should be focused when navigating via an arrow key\n     * @param  {HTMLButtonElement} currentElement  The element currently being iterated on\n     * @param  {Number}            delta           The number of cells that the focus should move\n     * @param  {Number}            stepsRemaining  The number of steps remaining in the iteration\n     * @return {HTMLButtonElement | void}\n     */\n    // eslint-disable-next-line complexity,max-statements\n    getElement({ currentElement, delta, stepsRemaining }) {\n      const element = this.getElementSibling(currentElement, delta)\n      const options = {\n        currentElement: element,\n        delta,\n        stepsRemaining: stepsRemaining - 1,\n      }\n\n      if (!element) {\n        return this.changePageAndSetFocus(options)\n      }\n\n      if (this.isBeyondPossibleDate(options)) {\n        return this.firstOrLastPossibleDate(options)\n      }\n\n      if (this.isMutedOrDisabled(element)) {\n        options.stepsRemaining = this.addMoreSteps(options)\n\n        return this.getElement(options)\n      }\n\n      if (stepsRemaining > 1 && options.currentElement) {\n        return this.getElement(options)\n      }\n\n      return element\n    },\n    /**\n     * Returns the element directly next to the currentElement\n     * @param  {HTMLButtonElement} currentElement The element currently being iterated on\n     * @param  {Number}            delta          The number of cells that the focus should move\n     * @return {HTMLButtonElement}\n     */\n    getElementSibling(currentElement, delta) {\n      const isNext = delta > 0\n\n      return isNext\n        ? currentElement.nextElementSibling\n        : currentElement.previousElementSibling\n    },\n    /**\n     * Returns the first or last cell, depending on the direction of the search\n     * @param  {Number} delta The number of cells that the focus should move\n     * @return {HTMLButtonElement}\n     */\n    getFirstOrLastElement(delta) {\n      const isNext = delta > 0\n      const elements = this.$refs.cells.$el.children\n\n      return isNext ? elements[0] : elements[elements.length - 1]\n    },\n    /**\n     * Returns the first or last non-disabled date, depending on the direction of the search\n     * @param  {HTMLButtonElement} currentElement  The element currently being iterated on\n     * @param  {Number}            delta           The number of cells that the focus should move\n     */\n    firstOrLastPossibleDate({ currentElement, delta }) {\n      if (delta > 0) {\n        return this.getElementSibling(currentElement, -1)\n      }\n\n      return this.getElementSibling(currentElement, 1)\n    },\n    /**\n     * Moves the focused cell up/down/left/right\n     * @param {Object}\n     */\n    handleArrow({ delta }) {\n      const stepsRemaining = Math.abs(delta)\n      const options = {\n        currentElement: document.activeElement,\n        delta,\n        stepsRemaining,\n      }\n\n      this.setFocusToAvailableCell(options)\n    },\n    /**\n     * Determines which transition to use (for edge dates) and emits a 'select' event\n     * @param {Object} cell\n     */\n    select(cell) {\n      if (cell.isPreviousMonth) {\n        this.$emit('set-transition-name', -1)\n      }\n\n      if (cell.isNextMonth) {\n        this.$emit('set-transition-name', 1)\n      }\n\n      this.$emit('select', cell)\n    },\n    /**\n     * Returns true if the given element cannot be focused\n     * @param  {HTMLButtonElement} currentElement  The element currently being iterated on\n     * @param  {Number}            delta           The number of cells that the focus should move\n     * @return {Boolean}\n     */\n    isBeyondPossibleDate({ currentElement, delta }) {\n      if (delta > 0 && this.latestPossibleDate) {\n        return this.isDatePossible(currentElement, delta)\n      }\n\n      if (delta < 0 && this.earliestPossibleDate) {\n        return this.isDatePossible(currentElement, delta)\n      }\n\n      return false\n    },\n    /**\n     * Returns true if the current element's date is NOT possible, given the `disabled-dates`\n     * @param  {HTMLButtonElement} element The element in question\n     * @param  {Number}            delta   Used to determine direction of travel\n     * @return {Boolean}\n     */\n    isDatePossible(element, delta) {\n      const cellId = element.getAttribute('data-id')\n      const cellDate = new Date(this.cells[cellId].timestamp)\n\n      if (delta > 0) {\n        return cellDate > this.latestPossibleDate\n      }\n\n      return cellDate < this.earliestPossibleDate\n    },\n    /**\n     * Returns true if the given element cannot be focused\n     * @param  {HTMLButtonElement} element The element in question\n     * @return {Boolean}\n     */\n    isMutedOrDisabled(element) {\n      const isMuted = element.classList.value.split(' ').includes('muted')\n      const isDisabled = element.disabled\n\n      return isMuted || isDisabled\n    },\n    /**\n     * Sets the focus on the correct cell following a page change\n     * @param {Object} options\n     */\n    setFocusOnNewPage({ delta, stepsRemaining }) {\n      const currentElement = this.getFirstOrLastElement(delta)\n      const options = {\n        currentElement,\n        delta,\n        stepsRemaining,\n      }\n\n      if (stepsRemaining <= 0) {\n        if (this.isMutedOrDisabled(currentElement)) {\n          options.stepsRemaining = Math.abs(options.delta)\n\n          setTimeout(() => {\n            this.setFocusToAvailableCell(options)\n          }, this.slideDuration)\n\n          return\n        }\n\n        setTimeout(() => {\n          currentElement.focus()\n        }, this.slideDuration)\n\n        return\n      }\n\n      setTimeout(() => {\n        this.setFocusToAvailableCell(options)\n      }, this.slideDuration)\n    },\n    /**\n     * Sets the focus on the next focusable cell when an arrow key is pressed\n     * @param {Object} options\n     */\n    setFocusToAvailableCell(options) {\n      const element = this.getElement(options)\n\n      if (element) {\n        element.focus()\n      }\n    },\n  },\n}\n</script>\n","/* eslint-disable no-underscore-dangle */\n\nimport makeCellUtils from './cellUtils'\nimport DisabledDate from './DisabledDate'\n\nexport default class HighlightedDate {\n  constructor(utils, disabledDates, highlighted) {\n    this._utils = utils\n    this._disabledDates = disabledDates\n    this._highlighted = highlighted\n  }\n\n  get config() {\n    const highlightedDates = this._highlighted\n    const utils = makeCellUtils(this._utils)\n\n    return {\n      exists: utils.configExists(highlightedDates),\n      to: utils.dayMonthYear(highlightedDates, 'to'),\n      from: utils.dayMonthYear(highlightedDates, 'from'),\n      has: {\n        customPredictor: utils.isDefined(highlightedDates, 'customPredictor'),\n        daysOfMonth: utils.hasArray(highlightedDates, 'daysOfMonth'),\n        daysOfWeek: utils.hasArray(highlightedDates, 'days'),\n        from: utils.hasDate(highlightedDates, 'from'),\n        specificDates: utils.hasArray(highlightedDates, 'dates'),\n        to: utils.hasDate(highlightedDates, 'to'),\n        includeDisabled:\n          utils.isDefined(highlightedDates, 'includeDisabled') &&\n          highlightedDates.includeDisabled,\n      },\n    }\n  }\n\n  isDateDisabled(date) {\n    const utils = this._utils\n    const disabledDates = this._disabledDates\n\n    return new DisabledDate(utils, disabledDates).isDateDisabled(date)\n  }\n\n  isHighlightingNotPossible(date) {\n    const { config } = this\n\n    if (!config.exists) return false\n\n    return !config.has.includeDisabled && this.isDateDisabled(date)\n  }\n\n  isDateHighlightedVia(date) {\n    const highlightedDates = this._highlighted\n    const { has } = this.config\n\n    return {\n      to: () => {\n        return has.to && date <= highlightedDates.to\n      },\n      from: () => {\n        return has.from && date >= highlightedDates.from\n      },\n      customPredictor: () => {\n        return has.customPredictor && highlightedDates.customPredictor(date)\n      },\n      specificDate: () => {\n        if (!has.specificDates) return false\n\n        return highlightedDates.dates.some((d) => {\n          return this._utils.compareDates(date, d)\n        })\n      },\n      daysOfWeek: () => {\n        if (!has.daysOfWeek) return false\n\n        return highlightedDates.days.indexOf(this._utils.getDay(date)) !== -1\n      },\n      daysOfMonth: () => {\n        if (!has.daysOfMonth) return false\n\n        return (\n          highlightedDates.daysOfMonth.indexOf(this._utils.getDate(date)) !== -1\n        )\n      },\n    }\n  }\n\n  // eslint-disable-next-line complexity,max-statements\n  isDateHighlighted(date) {\n    if (this.isHighlightingNotPossible(date)) return false\n\n    const isHighlightedVia = this.isDateHighlightedVia(date)\n\n    return (\n      (isHighlightedVia.to() && isHighlightedVia.from()) ||\n      isHighlightedVia.specificDate() ||\n      isHighlightedVia.daysOfWeek() ||\n      isHighlightedVia.daysOfMonth() ||\n      isHighlightedVia.customPredictor()\n    )\n  }\n}\n","<template>\n  <div class=\"picker-cells\" data-test-picker-cells>\n    <button\n      v-for=\"(cell, id) in cells\"\n      :key=\"cell.timestamp\"\n      :ref=\"cell.isOpenDate ? 'openDate' : null\"\n      :class=\"cellClasses(cell)\"\n      :data-id=\"id\"\n      :data-test-tabbable-cell=\"id === tabbableCellId\"\n      :data-test-open-date=\"cell.isOpenDate\"\n      :data-test-today-cell=\"cell.isToday\"\n      :disabled=\"cell.isDisabled\"\n      type=\"button\"\n      @click=\"$emit('select', cell)\"\n      @keydown.up.prevent=\"handleArrow(id, -columns)\"\n      @keydown.down.prevent=\"handleArrow(id, columns)\"\n      @keydown.left.prevent=\"handleArrow(id, isRtl ? 1 : -1)\"\n      @keydown.right.prevent=\"handleArrow(id, isRtl ? -1 : 1)\"\n    >\n      <slot :cell=\"cell\" />\n    </button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'PickerCells',\n  props: {\n    bootstrapStyling: {\n      type: Boolean,\n      default: false,\n    },\n    cells: {\n      type: Array,\n      required: true,\n    },\n    isRtl: {\n      type: Boolean,\n      default: false,\n    },\n    showEdgeDates: {\n      type: Boolean,\n      default: true,\n    },\n    tabbableCellId: {\n      type: Number,\n      default: null,\n    },\n    view: {\n      type: String,\n      validator: (val) => ['day', 'month', 'year'].includes(val),\n      required: true,\n    },\n  },\n  computed: {\n    /**\n     * The number of columns in the picker\n     * @return {Number}\n     */\n    columns() {\n      return this.view === 'day' ? 7 : 3\n    },\n  },\n  methods: {\n    /**\n     * Set the classes for a specific cell\n     * @return {Array}\n     */\n    // eslint-disable-next-line complexity\n    cellClasses(cell) {\n      return [\n        'cell',\n        this.view,\n        {\n          'btn': this.bootstrapStyling,\n          'disabled': cell.isDisabled,\n          'highlight-start': cell.isHighlightStart,\n          'highlight-end': cell.isHighlightEnd,\n          'highlighted': cell.isHighlighted,\n          'muted': cell.isPreviousMonth || cell.isNextMonth,\n          'open': cell.isOpenDate,\n          'sat': cell.isSaturday,\n          'sun': cell.isSunday,\n          'selected': this.showEdgeDates\n            ? cell.isSelected\n            : cell.isSelected && !cell.isPreviousMonth && !cell.isNextMonth,\n          'today': this.showEdgeDates\n            ? cell.isToday\n            : cell.isToday && !cell.isPreviousMonth && !cell.isNextMonth,\n          'weekend': cell.isWeekend,\n        },\n      ]\n    },\n    /**\n     * Emits an `arrow` event\n     */\n    handleArrow(cellId, delta) {\n      this.$emit('arrow', { cellId, delta })\n    },\n  },\n}\n</script>\n","<template>\n  <button\n    class=\"vdp-datepicker__up\"\n    data-test-up-button\n    :disabled=\"isDisabled\"\n    type=\"button\"\n    @click=\"$emit('select')\"\n    @keydown.down.prevent=\"$emit('set-focus', ['tabbableCell'])\"\n    @keydown.up.prevent=\"$emit('focus-input')\"\n    @keydown.left.prevent=\"$emit('set-focus', [isRtl ? 'next' : 'prev'])\"\n    @keydown.right.prevent=\"$emit('set-focus', [isRtl ? 'prev' : 'next'])\"\n  >\n    <slot />\n  </button>\n</template>\n\n<script>\nexport default {\n  name: 'UpButton',\n  props: {\n    isDisabled: {\n      type: Boolean,\n      default: false,\n    },\n    isRtl: {\n      type: Boolean,\n      required: true,\n    },\n  },\n}\n</script>\n","<template>\n  <div>\n    <div v-if=\"$slots.beforeCalendarHeaderDay\">\n      <slot name=\"beforeCalendarHeaderDay\" />\n    </div>\n\n    <PickerHeader\n      v-if=\"showHeader\"\n      ref=\"pickerHeader\"\n      :bootstrap-styling=\"bootstrapStyling\"\n      :is-next-disabled=\"isNextDisabled\"\n      :is-previous-disabled=\"isPreviousDisabled\"\n      :is-rtl=\"isRtl\"\n      @focus-input=\"focusInput\"\n      @page-change=\"changePage($event)\"\n      @set-focus=\"$emit('set-focus', $event)\"\n    >\n      <slot slot=\"prevIntervalBtn\" name=\"prevIntervalBtn\" />\n      <UpButton\n        ref=\"up\"\n        :class=\"{ btn: bootstrapStyling }\"\n        :is-disabled=\"isUpDisabled\"\n        :is-rtl=\"isRtl\"\n        @focus-input=\"focusInput\"\n        @select=\"$emit('set-view', 'month')\"\n        @set-focus=\"$emit('set-focus', $event)\"\n      >\n        {{ pageTitleDay }}\n      </UpButton>\n      <slot slot=\"nextIntervalBtn\" name=\"nextIntervalBtn\" />\n    </PickerHeader>\n\n    <div>\n      <div class=\"day-header\">\n        <span v-for=\"day in daysOfWeek\" :key=\"day\">\n          {{ day }}\n        </span>\n      </div>\n\n      <div class=\"cells-wrapper\">\n        <Transition :name=\"transitionName\">\n          <PickerCells\n            ref=\"cells\"\n            :key=\"pageTitleDay\"\n            v-slot=\"{ cell }\"\n            :bootstrap-styling=\"bootstrapStyling\"\n            :cells=\"cells\"\n            :is-rtl=\"isRtl\"\n            :show-edge-dates=\"showEdgeDates\"\n            :tabbable-cell-id=\"tabbableCellId\"\n            view=\"day\"\n            @arrow=\"handleArrow($event)\"\n            @select=\"select($event)\"\n          >\n            <slot name=\"dayCellContent\" :cell=\"cell\">\n              {{ dayCellContent(cell) }}\n            </slot>\n          </PickerCells>\n        </Transition>\n      </div>\n    </div>\n\n    <div v-if=\"$slots.calendarFooterDay\">\n      <slot name=\"calendarFooterDay\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport pickerMixin from '~/mixins/pickerMixin.vue'\nimport DisabledDate from '~/utils/DisabledDate'\nimport HighlightedDate from '~/utils/HighlightedDate'\nimport PickerCells from './PickerCells.vue'\nimport UpButton from './UpButton.vue'\n\nexport default {\n  name: 'PickerDay',\n  components: { PickerCells, UpButton },\n  mixins: [pickerMixin],\n  props: {\n    dayCellContent: {\n      type: Function,\n      default: (day) => day.date,\n    },\n    firstDayOfWeek: {\n      type: String,\n      default: 'sun',\n    },\n    highlighted: {\n      type: Object,\n      default() {\n        return {}\n      },\n    },\n    showFullMonthName: {\n      type: Boolean,\n      default: false,\n    },\n    showEdgeDates: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  computed: {\n    /**\n     * Sets an array with all days to show this month\n     * @return {Array}\n     */\n    cells() {\n      const days = []\n      const daysInCalendar =\n        this.daysFromPrevMonth + this.daysInMonth + this.daysFromNextMonth\n      const dObj = this.firstCellDate()\n\n      for (let i = 0; i < daysInCalendar; i += 1) {\n        days.push(this.makeDay(i, dObj))\n        this.utils.setDate(dObj, this.utils.getDate(dObj) + 1)\n      }\n\n      return days\n    },\n    /**\n     * Gets the name of the month the current page is on\n     * @return {String}\n     */\n    currMonthName() {\n      const monthName = this.showFullMonthName\n        ? this.translation.months\n        : this.translation.monthsAbbr\n\n      return this.utils.getMonthNameAbbr(this.pageMonth, monthName)\n    },\n    /**\n     * Gets the name of the year that current page is on\n     * @return {String}\n     */\n    currYearName() {\n      const { yearSuffix } = this.translation\n      return `${this.pageYear}${yearSuffix}`\n    },\n    /**\n     * Returns an array of day names\n     * @return {String[]}\n     */\n    daysOfWeek() {\n      return this.translation.getDaysStartingOn(this.firstDayOfWeekNumber)\n    },\n    /**\n     * Returns the number of days in this month\n     * @return {String[]}\n     */\n    daysInMonth() {\n      return this.utils.getDaysInMonth(this.pageDate)\n    },\n    /**\n     * Calculates how many days to show from the previous month\n     * @return {number}\n     */\n    daysFromPrevMonth() {\n      const firstOfMonthDayNumber = this.utils.getDay(this.pageDate)\n      return (7 - this.firstDayOfWeekNumber + firstOfMonthDayNumber) % 7\n    },\n    /**\n     * Calculates how many days to show from the next month\n     * @return {number}\n     */\n    daysFromNextMonth() {\n      const daysThisAndPrevMonth = this.daysFromPrevMonth + this.daysInMonth\n      return Math.ceil(daysThisAndPrevMonth / 7) * 7 - daysThisAndPrevMonth\n    },\n    /**\n     * Returns first-day-of-week as a number (Sunday is 0)\n     * @return {Number}\n     */\n    firstDayOfWeekNumber() {\n      return this.utils.getDayFromAbbr(this.firstDayOfWeek)\n    },\n    /**\n     * The first day of the next page's month.\n     * @return {Date}\n     */\n    firstOfNextMonth() {\n      const d = new Date(this.pageDate)\n      return new Date(this.utils.setMonth(d, this.utils.getMonth(d) + 1))\n    },\n    /**\n     * A look-up object created from 'highlighted' prop\n     * @return {Object}\n     */\n    highlightedConfig() {\n      return new HighlightedDate(\n        this.utils,\n        this.disabledDates,\n        this.highlighted,\n      ).config\n    },\n    /**\n     * Is the next month disabled?\n     * @return {Boolean}\n     */\n    isNextDisabled() {\n      if (!this.disabledConfig.has.from) {\n        return false\n      }\n      return (\n        this.disabledConfig.from.month <= this.pageMonth &&\n        this.disabledConfig.from.year <= this.pageYear\n      )\n    },\n    /**\n     * Is the previous month disabled?\n     * @return {Boolean}\n     */\n    isPreviousDisabled() {\n      if (!this.disabledConfig.has.to) {\n        return false\n      }\n      return (\n        this.disabledConfig.to.month >= this.pageMonth &&\n        this.disabledConfig.to.year >= this.pageYear\n      )\n    },\n    /**\n     * Returns the current page's month as an integer.\n     * @return {Number}\n     */\n    pageMonth() {\n      return this.utils.getMonth(this.pageDate)\n    },\n    /**\n     * Display the current page's month & year as the title.\n     * @return {String}\n     */\n    pageTitleDay() {\n      return this.translation.ymd\n        ? `${this.currYearName} ${this.currMonthName}`\n        : `${this.currMonthName} ${this.currYearName}`\n    },\n  },\n  methods: {\n    /**\n     * Set up a new date object to the first day of the current 'page'\n     * @return Date\n     */\n    firstCellDate() {\n      const d = this.pageDate\n\n      const firstOfMonth = this.useUtc\n        ? new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), 1))\n        : new Date(\n            d.getFullYear(),\n            d.getMonth(),\n            1,\n            d.getHours(),\n            d.getMinutes(),\n          )\n\n      return new Date(\n        firstOfMonth.setDate(firstOfMonth.getDate() - this.daysFromPrevMonth),\n      )\n    },\n    /**\n     * Whether a day is disabled\n     * @param {Date} date to check if disabled\n     * @return {Boolean}\n     */\n    isDisabledDate(date) {\n      return new DisabledDate(this.utils, this.disabledDates).isDateDisabled(\n        date,\n      )\n    },\n    /**\n     * Whether a day is highlighted\n     * (only if it is not disabled already except when highlighted.includeDisabled is true)\n     * @param {Date} date to check if highlighted\n     * @return {Boolean}\n     */\n    isHighlightedDate(date) {\n      const dateWithoutTime = this.utils.resetDateTime(date)\n\n      return new HighlightedDate(\n        this.utils,\n        this.disabledDates,\n        this.highlighted,\n      ).isDateHighlighted(dateWithoutTime)\n    },\n    /**\n     * Whether a day is highlighted and it is the last date\n     * in the highlighted range of dates\n     * @param {Date} date end highlight\n     * @return {Boolean}\n     */\n    isHighlightEnd(date) {\n      const config = this.highlightedConfig\n\n      return (\n        this.isHighlightedDate(date) &&\n        config.to.year === this.utils.getFullYear(date) &&\n        config.to.month === this.utils.getMonth(date) &&\n        config.to.day === this.utils.getDate(date)\n      )\n    },\n    /**\n     * Whether a day is highlighted and it is the first date\n     * in the highlighted range of dates\n     * @param {Date} date start highlight\n     * @return {Boolean}\n     */\n    isHighlightStart(date) {\n      const config = this.highlightedConfig\n\n      return (\n        this.isHighlightedDate(date) &&\n        config.from.year === this.utils.getFullYear(date) &&\n        config.from.month === this.utils.getMonth(date) &&\n        config.from.day === this.utils.getDate(date)\n      )\n    },\n    /**\n     * Whether a day is selected\n     * @param {Date} dObj to check if selected\n     * @return {Boolean}\n     */\n    isSelectedDate(dObj) {\n      return (\n        this.selectedDate && this.utils.compareDates(this.selectedDate, dObj)\n      )\n    },\n    /**\n     * Defines the objects within the days array\n     * @param  {id}  id\n     * @param  {Date}  dObj\n     * @return {Object}\n     */\n    // eslint-disable-next-line complexity\n    makeDay(id, dObj) {\n      const isNextMonth = dObj >= this.firstOfNextMonth\n      const isPreviousMonth = dObj < this.pageDate\n      const isSaturday = this.utils.getDay(dObj) === 6\n      const isSunday = this.utils.getDay(dObj) === 0\n      const showDate = this.showEdgeDates || !(isPreviousMonth || isNextMonth)\n\n      return {\n        date: showDate ? this.utils.getDate(dObj) : '',\n        timestamp: dObj.valueOf(),\n        isSelected: this.isSelectedDate(dObj),\n        isDisabled: showDate ? this.isDisabledDate(dObj) : true,\n        isHighlighted: this.isHighlightedDate(dObj),\n        isHighlightStart: this.isHighlightStart(dObj),\n        isHighlightEnd: this.isHighlightEnd(dObj),\n        isOpenDate:\n          this.openDate && this.utils.compareDates(dObj, this.openDate),\n        isToday: this.utils.compareDates(dObj, new Date()),\n        isWeekend: isSaturday || isSunday,\n        isSaturday,\n        isSunday,\n        isPreviousMonth,\n        isNextMonth,\n      }\n    },\n  },\n}\n</script>\n","<template>\n  <div>\n    <div v-if=\"$slots.beforeCalendarHeaderMonth\">\n      <slot name=\"beforeCalendarHeaderMonth\" />\n    </div>\n\n    <PickerHeader\n      v-if=\"showHeader\"\n      ref=\"pickerHeader\"\n      :bootstrap-styling=\"bootstrapStyling\"\n      :is-next-disabled=\"isNextDisabled\"\n      :is-previous-disabled=\"isPreviousDisabled\"\n      :is-rtl=\"isRtl\"\n      @focus-input=\"focusInput\"\n      @page-change=\"changePage($event)\"\n      @set-focus=\"$emit('set-focus', $event)\"\n    >\n      <slot slot=\"prevIntervalBtn\" name=\"prevIntervalBtn\" />\n      <UpButton\n        ref=\"up\"\n        :class=\"{ btn: bootstrapStyling }\"\n        :is-disabled=\"isUpDisabled\"\n        :is-rtl=\"isRtl\"\n        @focus-input=\"focusInput\"\n        @select=\"$emit('set-view', 'year')\"\n        @set-focus=\"$emit('set-focus', $event)\"\n      >\n        {{ pageTitleMonth }}\n      </UpButton>\n      <slot slot=\"nextIntervalBtn\" name=\"nextIntervalBtn\" />\n    </PickerHeader>\n\n    <div class=\"cells-wrapper\">\n      <Transition :name=\"transitionName\">\n        <PickerCells\n          ref=\"cells\"\n          :key=\"pageTitleMonth\"\n          v-slot=\"{ cell }\"\n          :bootstrap-styling=\"bootstrapStyling\"\n          :cells=\"cells\"\n          :is-rtl=\"isRtl\"\n          :tabbable-cell-id=\"tabbableCellId\"\n          view=\"month\"\n          @arrow=\"handleArrow($event)\"\n          @select=\"select($event)\"\n        >\n          {{ cell.month }}\n        </PickerCells>\n      </Transition>\n    </div>\n\n    <div v-if=\"$slots.calendarFooterMonth\">\n      <slot name=\"calendarFooterMonth\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport pickerMixin from '~/mixins/pickerMixin.vue'\nimport DisabledDate from '~/utils/DisabledDate'\nimport PickerCells from './PickerCells.vue'\nimport UpButton from './UpButton.vue'\n\nexport default {\n  name: 'PickerMonth',\n  components: { PickerCells, UpButton },\n  mixins: [pickerMixin],\n  computed: {\n    /**\n     * Sets an array with all months to show this year\n     * @return {Array}\n     */\n    cells() {\n      const d = this.pageDate\n      const months = []\n      // set up a new date object to the beginning of the current 'page'\n      const dObj = this.useUtc\n        ? new Date(Date.UTC(d.getUTCFullYear(), 0, d.getUTCDate()))\n        : new Date(\n            d.getFullYear(),\n            0,\n            d.getDate(),\n            d.getHours(),\n            d.getMinutes(),\n          )\n\n      const todayMonth = new Date(\n        this.utils.setDate(this.utils.getNewDateObject(), 1),\n      )\n\n      for (let i = 0; i < 12; i += 1) {\n        months.push({\n          month: this.utils.getMonthName(i, this.translation.months),\n          timestamp: dObj.valueOf(),\n          isDisabled: this.isDisabledMonth(dObj),\n          isOpenDate: this.isOpenMonth(dObj),\n          isSelected: this.isSelectedMonth(dObj),\n          isToday: this.utils.compareDates(dObj, todayMonth),\n        })\n        this.utils.setMonth(dObj, this.utils.getMonth(dObj) + 1)\n      }\n\n      return months\n    },\n    /**\n     * Is the next year disabled?\n     * @return {Boolean}\n     */\n    isNextDisabled() {\n      if (!this.disabledConfig.has.from) {\n        return false\n      }\n      return this.disabledConfig.from.year <= this.pageYear\n    },\n    /**\n     * Is the previous year disabled?\n     * @return {Boolean}\n     */\n    isPreviousDisabled() {\n      if (!this.disabledConfig.has.to) {\n        return false\n      }\n      return this.disabledConfig.to.year >= this.pageYear\n    },\n    /**\n     * Display the current page's year as the title.\n     * @return {String}\n     */\n    pageTitleMonth() {\n      const { yearSuffix } = this.translation\n      return `${this.pageYear}${yearSuffix}`\n    },\n  },\n  methods: {\n    /**\n     * Whether a month is disabled\n     * @param {Date} date\n     * @return {Boolean}\n     */\n    isDisabledMonth(date) {\n      return new DisabledDate(this.utils, this.disabledDates).isMonthDisabled(\n        date,\n      )\n    },\n    /**\n     * Should the calendar open on this month?\n     * @return {Boolean}\n     */\n    isOpenMonth(date) {\n      if (!this.openDate) {\n        return false\n      }\n\n      const openDateMonth = this.utils.getMonth(this.openDate)\n      const openDateYear = this.utils.getFullYear(this.openDate)\n      const thisDateMonth = this.utils.getMonth(date)\n      const thisDateYear = this.utils.getFullYear(date)\n\n      return openDateMonth === thisDateMonth && openDateYear === thisDateYear\n    },\n    /**\n     * Whether the selected date is in this month\n     * @param {Date} date\n     * @return {Boolean}\n     */\n    isSelectedMonth(date) {\n      const month = this.utils.getMonth(date)\n      const year = this.utils.getFullYear(date)\n\n      return (\n        this.selectedDate &&\n        year === this.utils.getFullYear(this.selectedDate) &&\n        month === this.utils.getMonth(this.selectedDate)\n      )\n    },\n  },\n}\n</script>\n","<template>\n  <div>\n    <div v-if=\"$slots.beforeCalendarHeaderYear\">\n      <slot name=\"beforeCalendarHeaderYear\" />\n    </div>\n\n    <PickerHeader\n      v-if=\"showHeader\"\n      ref=\"pickerHeader\"\n      :bootstrap-styling=\"bootstrapStyling\"\n      :is-next-disabled=\"isNextDisabled\"\n      :is-previous-disabled=\"isPreviousDisabled\"\n      :is-rtl=\"isRtl\"\n      @focus-input=\"focusInput\"\n      @page-change=\"changePage($event)\"\n      @set-focus=\"$emit('set-focus', $event)\"\n    >\n      <slot slot=\"prevIntervalBtn\" name=\"prevIntervalBtn\" />\n      <UpButton\n        ref=\"up\"\n        :class=\"{ btn: bootstrapStyling }\"\n        :is-disabled=\"true\"\n        :is-rtl=\"isRtl\"\n      >\n        {{ pageTitleYear }}\n      </UpButton>\n      <slot slot=\"nextIntervalBtn\" name=\"nextIntervalBtn\" />\n    </PickerHeader>\n\n    <div class=\"cells-wrapper\">\n      <Transition :name=\"transitionName\">\n        <PickerCells\n          ref=\"cells\"\n          :key=\"pageTitleYear\"\n          v-slot=\"{ cell }\"\n          :bootstrap-styling=\"bootstrapStyling\"\n          :cells=\"cells\"\n          :is-rtl=\"isRtl\"\n          :tabbable-cell-id=\"tabbableCellId\"\n          view=\"year\"\n          @arrow=\"handleArrow($event)\"\n          @select=\"select($event)\"\n        >\n          {{ cell.year }}\n        </PickerCells>\n      </Transition>\n    </div>\n\n    <div v-if=\"$slots.calendarFooterYear\">\n      <slot name=\"calendarFooterYear\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport pickerMixin from '~/mixins/pickerMixin.vue'\nimport DisabledDate from '~/utils/DisabledDate'\nimport PickerCells from './PickerCells.vue'\nimport UpButton from './UpButton.vue'\n\nexport default {\n  name: 'PickerYear',\n  components: { PickerCells, UpButton },\n  mixins: [pickerMixin],\n  props: {\n    yearRange: {\n      type: Number,\n      default: 10,\n    },\n  },\n  computed: {\n    /**\n     * Sets an array with all years to show this decade (or yearRange)\n     * @return {Array}\n     */\n    // eslint-disable-next-line complexity,max-statements\n    cells() {\n      const d = this.pageDate\n      const years = []\n      const year = this.useUtc\n        ? Math.floor(d.getUTCFullYear() / this.yearRange) * this.yearRange\n        : Math.floor(d.getFullYear() / this.yearRange) * this.yearRange\n      // set up a new date object to the beginning of the current 'page'\n      const dObj = this.useUtc\n        ? new Date(Date.UTC(year, d.getUTCMonth(), d.getUTCDate()))\n        : new Date(\n            year,\n            d.getMonth(),\n            d.getDate(),\n            d.getHours(),\n            d.getMinutes(),\n          )\n      const todayYear = this.utils.getFullYear(this.utils.getNewDateObject())\n\n      for (let i = 0; i < this.yearRange; i += 1) {\n        years.push({\n          year: this.utils.getFullYear(dObj),\n          timestamp: dObj.valueOf(),\n          isDisabled: this.isDisabledYear(dObj),\n          isOpenDate: this.isOpenYear(dObj),\n          isSelected: this.isSelectedYear(dObj),\n          isToday: dObj.getFullYear() === todayYear,\n        })\n        this.utils.setFullYear(dObj, this.utils.getFullYear(dObj) + 1)\n      }\n\n      // Fill any remaining cells with blanks to position trailing cells correctly when rtl\n      const cellsInGrid = Math.ceil(this.yearRange / 3) * 3\n      for (let i = years.length; i < cellsInGrid; i += 1) {\n        years.push({\n          id: i,\n          isDisabled: true,\n        })\n      }\n\n      return years\n    },\n    /**\n     * Is the next decade disabled?\n     * @return {Boolean}\n     */\n    isNextDisabled() {\n      if (!this.disabledConfig.has.from) {\n        return false\n      }\n      return this.disabledConfig.from.year <= this.pageDecadeEnd\n    },\n    /**\n     * Is the previous decade disabled?\n     * @return {Boolean}\n     */\n    isPreviousDisabled() {\n      if (!this.disabledConfig.has.to) {\n        return false\n      }\n      return this.disabledConfig.to.year >= this.pageDecadeStart\n    },\n    /**\n     * The year at which the current yearRange starts\n     * @return {Number}\n     */\n    pageDecadeStart() {\n      return Math.floor(this.pageYear / this.yearRange) * this.yearRange\n    },\n    /**\n     * The year at which the current yearRange ends\n     * @return {Number}\n     */\n    pageDecadeEnd() {\n      return this.pageDecadeStart + this.yearRange - 1\n    },\n    /**\n     * Display the current page's decade (or year range) as the title.\n     * @return {String}\n     */\n    pageTitleYear() {\n      const { yearSuffix } = this.translation\n      return `${this.pageDecadeStart} - ${this.pageDecadeEnd}${yearSuffix}`\n    },\n  },\n  methods: {\n    /**\n     * Whether a year is disabled\n     * @param {Date} date\n     * @return {Boolean}\n     */\n    isDisabledYear(date) {\n      return new DisabledDate(this.utils, this.disabledDates).isYearDisabled(\n        date,\n      )\n    },\n    /**\n     * Should the calendar open on this year?\n     * @return {Boolean}\n     */\n    isOpenYear(date) {\n      if (!this.openDate) {\n        return false\n      }\n\n      const openDateYear = this.utils.getFullYear(this.openDate)\n      const thisDateYear = this.utils.getFullYear(date)\n\n      return openDateYear === thisDateYear\n    },\n    /**\n     * Whether the selected date is in this year\n     * @param {Date} date\n     * @return {Boolean}\n     */\n    isSelectedYear(date) {\n      const year = this.utils.getFullYear(date)\n\n      return (\n        this.selectedDate && year === this.utils.getFullYear(this.selectedDate)\n      )\n    },\n  },\n}\n</script>\n","/* eslint no-param-reassign: 0 */\n/**\n * get the hidden element width, height\n * @param {HTMLElement} element dom\n */\nexport function getPopupElementSize(element) {\n  const originalDisplay = element.style.display\n  const originalVisibility = element.style.visibility\n  element.style.display = 'block'\n  element.style.visibility = 'hidden'\n  const styles = window.getComputedStyle(element)\n  const width =\n    element.offsetWidth +\n    parseInt(styles.marginLeft, 10) +\n    parseInt(styles.marginRight, 10)\n  const height =\n    element.offsetHeight +\n    parseInt(styles.marginTop, 10) +\n    parseInt(styles.marginBottom, 10)\n  element.style.display = originalDisplay\n  element.style.visibility = originalVisibility\n\n  return {\n    width,\n    height,\n  }\n}\n\n/**\n * get the popup position\n * @param {Element} el element\n * @param {Element} elRelative relative element\n * @param {Number} targetWidth target element's width\n * @param {Number} targetHeight target element's height\n * @param {Boolean} appendToBody\n * @param {String} fixedPosition\n * @param {Boolean} rtl\n */\n// eslint-disable-next-line complexity,max-statements\nexport function getRelativePosition({\n  el,\n  elRelative,\n  targetWidth,\n  targetHeight,\n  appendToBody,\n  fixedPosition,\n  rtl,\n}) {\n  let left = 0\n  let top = 0\n  let offsetX = 0\n  let offsetY = 0\n  const relativeRect = elRelative.getBoundingClientRect()\n  const documentWidth = document.documentElement.clientWidth\n  const documentHeight = document.documentElement.clientHeight\n  if (appendToBody) {\n    offsetX = window.pageXOffset + relativeRect.left\n    offsetY = window.pageYOffset + relativeRect.top\n  }\n\n  const calendarBounding = el.getBoundingClientRect()\n  const outOfBoundsRight = calendarBounding.right > window.innerWidth\n  const outOfBoundsBottom = calendarBounding.bottom > window.innerHeight\n\n  const fixedPositionRight =\n    fixedPosition && fixedPosition.indexOf('right') !== -1\n  const fixedPositionTop = fixedPosition && fixedPosition.indexOf('top') !== -1\n\n  const setLeft = () => {\n    left = offsetX\n  }\n  const setRight = () => {\n    left = offsetX + relativeRect.width - targetWidth\n  }\n  const setBottom = () => {\n    top = offsetY + relativeRect.height\n  }\n  const setTop = () => {\n    top = offsetY - targetHeight\n  }\n\n  if (fixedPosition === '') {\n    if (outOfBoundsRight || rtl) {\n      setRight()\n    } else {\n      setLeft()\n    }\n\n    if (outOfBoundsBottom) {\n      setTop()\n    } else {\n      setBottom()\n    }\n\n    const hasRelativeWidth =\n      documentWidth - relativeRect.left < targetWidth &&\n      relativeRect.right < targetWidth\n\n    const hasRelativeHeight =\n      relativeRect.top <= targetHeight &&\n      documentHeight - relativeRect.bottom <= targetHeight\n\n    if (hasRelativeWidth) {\n      left = offsetX - relativeRect.left + 1\n    }\n\n    if (hasRelativeHeight) {\n      top = offsetY + documentHeight - relativeRect.top - targetHeight\n    }\n  } else {\n    if (fixedPositionRight) {\n      setRight()\n    } else {\n      setLeft()\n    }\n\n    if (fixedPositionTop) {\n      setTop()\n    } else {\n      setBottom()\n    }\n  }\n\n  return {\n    left: `${left}px`,\n    top: `${top}px`,\n  }\n}\n","<script>\nimport { getPopupElementSize, getRelativePosition } from '~/utils/dom'\n\nexport default {\n  name: 'Popup',\n  props: {\n    appendToBody: {\n      type: Boolean,\n      default: true,\n    },\n    fixedPosition: {\n      type: String,\n      default: '',\n    },\n    inline: {\n      type: Boolean,\n      default: false,\n    },\n    rtl: {\n      type: Boolean,\n      default: false,\n    },\n    visible: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      popupRect: null,\n    }\n  },\n  watch: {\n    visible: {\n      immediate: true,\n      handler(val) {\n        if (val) {\n          this.displayPopup()\n        }\n      },\n    },\n  },\n  mounted() {\n    if (this.inline) {\n      return\n    }\n    if (this.appendToBody) {\n      document.body.appendChild(this.$el)\n    }\n  },\n  beforeDestroy() {\n    if (this.inline) {\n      return\n    }\n    if (this.appendToBody && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el)\n    }\n  },\n  methods: {\n    /**\n     * Adjusts the popup's `top` style attribute when `append-to-body` is true\n     */\n    setTopStyle() {\n      if (this.appendToBody) {\n        const relativeRect = this.$parent.$el.getBoundingClientRect()\n        this.$el.style.top = `${relativeRect.bottom + window.scrollY}px`\n      }\n    },\n    /**\n     * Sets the `left` and `top` style attributes of the popup\n     */\n    displayPopup() {\n      if (this.inline || !this.visible) return\n      this.setTopStyle()\n      const popup = this.$el\n      const relativeElement = this.$parent.$el\n      if (!this.popupRect) {\n        this.popupRect = getPopupElementSize(popup)\n      }\n      const { width, height } = this.popupRect\n      const { left, top } = getRelativePosition({\n        el: popup,\n        elRelative: relativeElement,\n        targetWidth: width,\n        targetHeight: height,\n        appendToBody: this.appendToBody,\n        fixedPosition: this.fixedPosition,\n        rtl: this.rtl,\n      })\n\n      this.$el.style.left = left\n      this.$el.style.top = top\n    },\n  },\n  render() {\n    return this.$slots.default\n  },\n}\n</script>\n","<template>\n  <div\n    :id=\"datepickerId\"\n    ref=\"datepicker\"\n    class=\"vdp-datepicker\"\n    :class=\"[wrapperClass, { rtl: isRtl }]\"\n    @focusin=\"handleFocusIn($event)\"\n    @focusout=\"handleFocusOut($event)\"\n    @keydown.esc=\"resetOrClose\"\n    @keydown.tab=\"tabThroughNavigation($event)\"\n  >\n    <DateInput\n      :id=\"id\"\n      ref=\"dateInput\"\n      :autofocus=\"autofocus\"\n      :bootstrap-styling=\"bootstrapStyling\"\n      :calendar-button=\"calendarButton\"\n      :calendar-button-icon=\"calendarButtonIcon\"\n      :calendar-button-icon-content=\"calendarButtonIconContent\"\n      :clear-button=\"clearButton\"\n      :clear-button-icon=\"clearButtonIcon\"\n      :disabled=\"disabled\"\n      :format=\"format\"\n      :inline=\"inline\"\n      :input-class=\"inputClass\"\n      :is-open=\"isOpen\"\n      :maxlength=\"maxlength\"\n      :name=\"name\"\n      :parser=\"parser\"\n      :pattern=\"pattern\"\n      :placeholder=\"placeholder\"\n      :ref-name=\"refName\"\n      :required=\"required\"\n      :selected-date=\"selectedDate\"\n      :show-calendar-on-button-click=\"showCalendarOnButtonClick\"\n      :show-calendar-on-focus=\"showCalendarOnFocus\"\n      :tabindex=\"tabindex\"\n      :translation=\"translation\"\n      :typeable=\"typeable\"\n      :use-utc=\"useUtc\"\n      @blur=\"handleInputBlur\"\n      @clear-date=\"clearDate\"\n      @close=\"close\"\n      @focus=\"handleInputFocus\"\n      @open=\"open\"\n      @set-focus=\"setFocus($event)\"\n      @typed-date=\"handleTypedDate\"\n    >\n      <slot slot=\"beforeDateInput\" name=\"beforeDateInput\" />\n      <slot slot=\"afterDateInput\" name=\"afterDateInput\" />\n      <slot slot=\"clearBtn\" name=\"clearBtn\" />\n      <slot slot=\"calendarBtn\" name=\"calendarBtn\" />\n    </DateInput>\n\n    <Popup\n      ref=\"popup\"\n      :append-to-body=\"appendToBody\"\n      :fixed-position=\"fixedPosition\"\n      :inline=\"inline\"\n      :rtl=\"isRtl\"\n      :visible=\"isOpen\"\n    >\n      <Transition name=\"toggle\">\n        <div\n          v-show=\"isOpen\"\n          class=\"vdp-datepicker__calendar\"\n          :class=\"pickerClasses\"\n          data-test-calendar\n          @mousedown.prevent\n          @focusin.stop=\"handleFocusIn($event)\"\n          @focusout.stop=\"handleFocusOut($event)\"\n          @keydown.esc.stop=\"resetOrClose\"\n          @keydown.tab.stop=\"tabThroughNavigation($event)\"\n        >\n          <Transition name=\"view\">\n            <div ref=\"view\" :key=\"view\">\n              <div v-if=\"$slots.beforeCalendarHeader\">\n                <slot name=\"beforeCalendarHeader\" />\n              </div>\n              <Component\n                :is=\"picker\"\n                ref=\"picker\"\n                :bootstrap-styling=\"bootstrapStyling\"\n                class=\"picker-view\"\n                :day-cell-content=\"dayCellContent\"\n                :disabled-dates=\"disabledDates\"\n                :first-day-of-week=\"firstDayOfWeek\"\n                :highlighted=\"highlighted\"\n                :is-rtl=\"isRtl\"\n                :is-typeable=\"typeable\"\n                :is-up-disabled=\"isUpDisabled\"\n                :is-minimum-view=\"isMinimumView\"\n                :open-date=\"computedOpenDate\"\n                :page-date=\"pageDate\"\n                :selected-date=\"selectedDate\"\n                :show-edge-dates=\"showEdgeDates\"\n                :show-full-month-name=\"fullMonthName\"\n                :show-header=\"showHeader\"\n                :slide-duration=\"slideDuration\"\n                :tabbable-cell-id=\"tabbableCellId\"\n                :transition-name=\"transitionName\"\n                :translation=\"translation\"\n                :use-utc=\"useUtc\"\n                :view=\"view || computedInitialView\"\n                :year-range=\"yearPickerRange\"\n                @page-change=\"handlePageChange\"\n                @select=\"handleSelect\"\n                @set-focus=\"setFocus($event)\"\n                @set-transition-name=\"setTransitionName($event)\"\n                @set-view=\"setView\"\n              >\n                <template v-for=\"slotKey of calendarSlots\">\n                  <slot :slot=\"slotKey\" :name=\"slotKey\" />\n                </template>\n                <template #dayCellContent=\"{ cell }\">\n                  <slot v-if=\"cell\" name=\"dayCellContent\" :cell=\"cell\" />\n                </template>\n              </Component>\n              <div v-if=\"$slots.calendarFooter\">\n                <slot name=\"calendarFooter\" />\n              </div>\n            </div>\n          </Transition>\n        </div>\n      </Transition>\n    </Popup>\n  </div>\n</template>\n\n<script>\nimport en from '~/locale/translations/en'\nimport calendarSlots from '~/utils/calendarSlots'\nimport DateInput from '~/components/DateInput.vue'\nimport DisabledDate from '~/utils/DisabledDate'\nimport inputProps from '~/mixins/inputProps.vue'\nimport makeDateUtils from '~/utils/DateUtils'\nimport navMixin from '~/mixins/navMixin.vue'\nimport PickerDay from '~/components/PickerDay.vue'\nimport PickerMonth from '~/components/PickerMonth.vue'\nimport PickerYear from '~/components/PickerYear.vue'\nimport Popup from '~/components/Popup.vue'\n\nexport default {\n  name: 'Datepicker',\n  components: {\n    DateInput,\n    PickerDay,\n    PickerMonth,\n    PickerYear,\n    Popup,\n  },\n  mixins: [inputProps, navMixin],\n  props: {\n    appendToBody: {\n      type: Boolean,\n      default: false,\n    },\n    calendarClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n    dayCellContent: {\n      type: Function,\n      default: (day) => day.date,\n    },\n    disabledDates: {\n      type: Object,\n      default() {\n        return {}\n      },\n    },\n    firstDayOfWeek: {\n      type: String,\n      default: 'sun',\n    },\n    fixedPosition: {\n      type: String,\n      default: '',\n      validator: (val) => {\n        const possibleValues = [\n          '',\n          'bottom',\n          'bottom-left',\n          'bottom-right',\n          'top',\n          'top-left',\n          'top-right',\n        ]\n        return possibleValues.includes(val)\n      },\n    },\n    fullMonthName: {\n      type: Boolean,\n      default: false,\n    },\n    highlighted: {\n      type: Object,\n      default() {\n        return {}\n      },\n    },\n    initialView: {\n      type: String,\n      default: '',\n    },\n    language: {\n      type: Object,\n      default: () => en,\n    },\n    maximumView: {\n      type: String,\n      default: 'year',\n    },\n    minimumView: {\n      type: String,\n      default: 'day',\n    },\n    showEdgeDates: {\n      type: Boolean,\n      default: true,\n    },\n    showHeader: {\n      type: Boolean,\n      default: true,\n    },\n    value: {\n      type: [String, Date, Number],\n      default: '',\n      validator: (val) =>\n        val === null ||\n        val instanceof Date ||\n        typeof val === 'string' ||\n        typeof val === 'number',\n    },\n    wrapperClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n    yearPickerRange: {\n      type: Number,\n      default: 10,\n    },\n  },\n  data() {\n    const utils = makeDateUtils(this.useUtc)\n    const startDate = utils.getNewDateObject(this.openDate || null)\n    const pageTimestamp = utils.setDate(startDate, 1)\n\n    return {\n      calendarHeight: 0,\n      calendarSlots,\n      isClickOutside: false,\n      /*\n       * Vue cannot observe changes to a Date Object so date must be stored as a timestamp\n       * This represents the first day of the current viewing month\n       * {Number}\n       */\n      pageTimestamp,\n      /*\n       * Selected Date\n       * {Date}\n       */\n      selectedDate: null,\n      slideDuration: 250,\n      utils,\n      view: '',\n    }\n  },\n  computed: {\n    computedInitialView() {\n      return this.initialView || this.minimumView\n    },\n    computedOpenDate() {\n      const openDateOrToday = this.openDate\n        ? new Date(this.openDate)\n        : this.utils.getNewDateObject()\n      const openDate = this.selectedDate || openDateOrToday\n\n      // If the `minimum-view` is `month` or `year`, convert `openDate` accordingly\n      return this.minimumView === 'day'\n        ? openDate\n        : new Date(this.utils.setDate(openDate, 1))\n    },\n    datepickerId() {\n      return `vdp-${Math.random().toString(36).slice(-10)}`\n    },\n    isInline() {\n      return !!this.inline\n    },\n    isOpen() {\n      return this.view !== ''\n    },\n    isMinimumView() {\n      return this.view === this.minimumView\n    },\n    isRtl() {\n      return this.translation.rtl\n    },\n    isUpDisabled() {\n      return !this.allowedToShowView(this.nextView.up)\n    },\n    nextView() {\n      const views = ['day', 'month', 'year']\n      const isCurrentView = (view) => view === this.view\n      const viewIndex = views.findIndex(isCurrentView)\n      const nextViewDown = (index) => {\n        return index <= 0 ? undefined : views[index - 1]\n      }\n      const nextViewUp = (index) => {\n        if (index < 0) {\n          return undefined\n        }\n\n        if (index === views.length - 1) {\n          return 'decade'\n        }\n\n        return views[index + 1]\n      }\n\n      return {\n        up: nextViewUp(viewIndex),\n        down: nextViewDown(viewIndex),\n      }\n    },\n    pageDate() {\n      return new Date(this.pageTimestamp)\n    },\n    picker() {\n      const view = this.view || this.computedInitialView\n      return `Picker${this.ucFirst(view)}`\n    },\n    pickerClasses() {\n      return [\n        this.calendarClass,\n        this.isInline && 'vdp-datepicker__calendar--inline',\n        this.isRtl && this.appendToBody && 'rtl',\n      ]\n    },\n    translation() {\n      return this.language\n    },\n  },\n  watch: {\n    initialView() {\n      if (this.isOpen) {\n        this.setInitialView()\n      }\n    },\n    isActive(hasJustBecomeActive) {\n      if (hasJustBecomeActive && this.inline) {\n        this.setNavElementsFocusedIndex()\n        this.tabToCorrectInlineCell()\n      }\n    },\n    openDate() {\n      this.setPageDate()\n    },\n    value(value) {\n      const parsedValue = this.parseValue(value)\n      this.setValue(parsedValue)\n    },\n    view(newView, oldView) {\n      this.handleViewChange(newView, oldView)\n    },\n  },\n  mounted() {\n    this.init()\n    document.addEventListener('click', this.handleClickOutside)\n  },\n  beforeDestroy() {\n    document.removeEventListener('click', this.handleClickOutside)\n  },\n  methods: {\n    /**\n     * Are we allowed to show a specific picker view?\n     * @param {String} view\n     * @return {Boolean}\n     */\n    allowedToShowView(view) {\n      const views = ['day', 'month', 'year']\n      const minimumViewIndex = views.indexOf(this.minimumView)\n      const maximumViewIndex = views.indexOf(this.maximumView)\n      const viewIndex = views.indexOf(view)\n\n      return viewIndex >= minimumViewIndex && viewIndex <= maximumViewIndex\n    },\n    /**\n     * Clear the selected date\n     */\n    clearDate() {\n      if (!this.selectedDate) {\n        return\n      }\n\n      this.selectedDate = null\n      this.focus.refs = ['input']\n      this.close()\n      this.setPageDate()\n\n      this.$emit('selected', null)\n      this.$emit('input', null)\n      this.$emit('cleared')\n    },\n    /**\n     * Close the calendar\n     */\n    close() {\n      if (this.isInline) {\n        return\n      }\n\n      this.view = ''\n\n      if (this.showCalendarOnFocus) {\n        this.$refs.dateInput.shouldToggleOnClick = true\n      }\n\n      if (this.isClickOutside) {\n        this.isClickOutside = false\n      } else {\n        this.reviewFocus()\n      }\n\n      this.$emit('closed')\n    },\n    /**\n     * Closes the calendar when no element within it has focus\n     */\n    handleClickOutside() {\n      if (document.datepickerId !== this.datepickerId) {\n        return\n      }\n\n      const isFocused = this.allElements.includes(document.activeElement)\n\n      if (!isFocused && this.isOpen) {\n        this.isClickOutside = true\n        this.close()\n      }\n    },\n    /**\n     * Emits a 'blur' event\n     */\n    handleInputBlur() {\n      this.$emit('blur')\n    },\n    /**\n     * Emits a 'focus' event\n     */\n    handleInputFocus() {\n      this.$emit('focus')\n    },\n    /**\n     * Set the new pageDate, focus the relevant element and emit a `changed-<view>` event\n     */\n    handlePageChange({ focusRefs, pageDate }) {\n      this.setPageDate(pageDate)\n      this.focus.refs = focusRefs\n      this.focus.delay = this.slideDuration\n      this.reviewFocus()\n      this.$emit(`changed-${this.nextView.up}`, pageDate)\n    },\n    /**\n     * Set the date, or go to the next view down\n     */\n    // eslint-disable-next-line max-statements,complexity\n    handleSelect(cell) {\n      if (this.allowedToShowView(this.nextView.down)) {\n        this.showNextViewDown(cell)\n        return\n      }\n\n      this.$refs.dateInput.typedDate = ''\n      this.selectDate(cell.timestamp)\n      this.focus.delay = cell.isNextMonth ? this.slideDuration : 0\n      this.focus.refs = this.isInline ? ['tabbableCell'] : ['input']\n      this.close()\n\n      if (this.showCalendarOnFocus && !this.inline) {\n        this.$refs.dateInput.shouldToggleOnClick = true\n      } else {\n        this.reviewFocus()\n      }\n    },\n    /**\n     * Set the date from a 'typed-date' event\n     * @param {Date} date\n     */\n    handleTypedDate(date) {\n      if (this.selectedDate) {\n        this.setTransitionAndFocusDelay(this.selectedDate, date)\n      }\n\n      this.selectDate(date ? date.valueOf() : null)\n      this.reviewFocus()\n    },\n    /**\n     * Focus the relevant element when the view changes\n     * @param {String} newView\n     * @param {String} oldView\n     */\n    handleViewChange(newView, oldView) {\n      const isClosing = newView === ''\n      const isOpeningInline = oldView === '' && this.isInline\n\n      if (isClosing || isOpeningInline) {\n        return\n      }\n\n      if (!this.isRevertingToOpenDate) {\n        this.setViewChangeFocusRefs(newView, oldView)\n        this.reviewFocus()\n      }\n\n      this.isRevertingToOpenDate = false\n    },\n    /**\n     * Returns true if element has the given className\n     * @param   {HTMLElement} element\n     * @param   {String}      className\n     * @returns {Boolean}\n     */\n    hasClass(element, className) {\n      return element && element.className.split(' ').includes(className)\n    },\n    /**\n     * Initiate the component\n     */\n    init() {\n      if (this.value) {\n        let parsedValue = this.parseValue(this.value)\n        const isDateDisabled = parsedValue && this.isDateDisabled(parsedValue)\n\n        if (isDateDisabled) {\n          parsedValue = null\n          this.$emit('input', parsedValue)\n        }\n        this.setValue(parsedValue)\n      }\n\n      if (this.isInline) {\n        this.setInitialView()\n      }\n\n      this.setSlideDuration()\n    },\n    /**\n     * Returns true if a date is disabled\n     * @param {Date} date\n     */\n    isDateDisabled(date) {\n      return new DisabledDate(this.utils, this.disabledDates).isDateDisabled(\n        date,\n      )\n    },\n    /**\n     * Returns true if we should reset the focus to computedOpenDate\n     * @returns {Boolean}\n     */\n    isResetFocus() {\n      if (!this.isOpen) {\n        return false\n      }\n\n      const isOpenCellFocused =\n        this.hasClass(document.activeElement, 'cell') &&\n        !this.hasClass(document.activeElement, 'open')\n\n      return !this.isMinimumView || isOpenCellFocused\n    },\n    /**\n     * Opens the calendar with the relevant view: 'day', 'month', or 'year'\n     */\n    open() {\n      if (this.disabled || this.isInline) {\n        return\n      }\n\n      this.setInitialView()\n      this.reviewFocus()\n\n      this.$emit('opened')\n    },\n    /**\n     * Parse a datepicker value from string/number to date\n     * @param   {Date|String|Number|null} date\n     * @returns {Date}\n     */\n    parseValue(date) {\n      let dateTemp = date\n      if (typeof dateTemp === 'string' || typeof dateTemp === 'number') {\n        const parsed = new Date(dateTemp)\n        dateTemp = Number.isNaN(parsed.valueOf()) ? null : parsed\n      }\n      return dateTemp\n    },\n    /**\n     * Focus the open date, or close the calendar if already focused\n     */\n    resetOrClose() {\n      if (this.isResetFocus()) {\n        this.resetFocusToOpenDate()\n        return\n      }\n\n      if (this.isOpen) {\n        this.focus.refs = ['input']\n        this.close()\n      }\n    },\n    /**\n     * Select the date\n     * @param {Number} timestamp\n     */\n    selectDate(timestamp) {\n      if (!timestamp) {\n        this.selectedDate = null\n        return\n      }\n\n      const date = new Date(timestamp)\n      this.selectedDate = date\n      this.setPageDate(date)\n      this.$emit('selected', date)\n      this.$emit('input', date)\n    },\n    /**\n     * Sets the initial picker page view: day, month or year\n     */\n    setInitialView() {\n      const initialView = this.computedInitialView\n\n      if (!this.allowedToShowView(initialView)) {\n        throw new Error(\n          `initialView '${this.initialView}' cannot be rendered based on minimum '${this.minimumView}' and maximum '${this.maximumView}'`,\n        )\n      }\n\n      this.setView(initialView)\n    },\n    /**\n     * Sets the date that the calendar should open on\n     */\n    setPageDate(date) {\n      let dateTemp = date\n      if (!dateTemp) {\n        if (this.computedOpenDate) {\n          dateTemp = new Date(this.computedOpenDate)\n        } else {\n          dateTemp = new Date()\n        }\n        dateTemp = this.utils.resetDateTime(dateTemp)\n      }\n      this.pageTimestamp = this.utils.setDate(new Date(dateTemp), 1)\n    },\n    /**\n     * Sets the slide duration in milliseconds by looking up the stylesheet\n     */\n    setSlideDuration() {\n      if (!this.$refs.picker || !this.$refs.picker.$refs.cells) {\n        return\n      }\n      const cells = this.$refs.picker.$refs.cells.$el\n      const durationInSecs = window.getComputedStyle(cells).transitionDuration\n\n      this.slideDuration = parseFloat(durationInSecs) * 1000\n    },\n    /**\n     * Set the datepicker value\n     * @param {Date|String|Number|null} date\n     */\n    setValue(date) {\n      if (!date) {\n        this.selectedDate = null\n        this.setPageDate()\n        return\n      }\n      this.selectedDate = date\n      this.setPageDate(date)\n    },\n    /**\n     * Set the picker view\n     * @param {String} view\n     */\n    setView(view) {\n      if (this.allowedToShowView(view)) {\n        this.view = view\n      }\n    },\n    /**\n     * Sets the array of `refs` that might be focused following a view change\n     * @param {String} newView The view being changed to\n     * @param {String} oldView The previous view\n     */\n    setViewChangeFocusRefs(newView, oldView) {\n      if (oldView === '') {\n        this.focus.refs = []\n        return\n      }\n\n      const views = ['day', 'month', 'year']\n      const isNewView = (view) => view === newView\n      const isOldView = (view) => view === oldView\n      const newViewIndex = views.findIndex(isNewView)\n      const oldViewIndex = views.findIndex(isOldView)\n      const isViewChangeUp = newViewIndex - oldViewIndex > 0\n\n      this.focus.refs = isViewChangeUp\n        ? ['up', 'tabbableCell']\n        : ['tabbableCell', 'up']\n    },\n    /**\n     * Set the view to the next view down e.g. from `month` to `day`\n     * @param {Object} cell The currently focused cell\n     */\n    showNextViewDown(cell) {\n      this.setPageDate(new Date(cell.timestamp))\n      this.$emit(`changed-${this.view}`, cell)\n      this.setView(this.nextView.down)\n    },\n    /**\n     * Capitalizes the first letter\n     * @param {String} str The string to capitalize\n     * @returns {String}\n     */\n    ucFirst(str) {\n      return str[0].toUpperCase() + str.substring(1)\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\">\n@import '../styles/style.scss';\n</style>\n"],"names":["Language","constructor","language","months","monthsAbbr","days","rtl","ymd","yearSuffix","_language","TypeError","_months","length","RangeError","_monthsAbbr","_days","getDaysStartingOn","firstDayOfWeek","firstDays","slice","lastDays","concat","getMonthByAbbrName","name","monthValue","findIndex","month","getMonthByName","getParsedDate","formatStr","dateStr","translation","splitter","match","df","split","ds","Date","getFullYear","i","test","tmp","replace","utils","useUtc","date","getUTCFullYear","getMonth","getUTCMonth","getDaysInMonth","daysInMonth","getDate","getUTCDate","getDay","getUTCDay","getHours","getUTCHours","getMinutes","getUTCMinutes","setFullYear","value","setUTCFullYear","setMonth","setUTCMonth","setDate","setUTCDate","compareDates","date1","date2","d1","valueOf","d2","resetDateTime","isValidDate","Object","prototype","toString","call","Number","isNaN","getDayNameAbbr","getDayFromAbbr","abbr","en","toLowerCase","getMonthName","Error","getMonthNameAbbr","year","getNthSuffix","day","formatDate","matches","dd","d","yyyy","yy","String","MMMM","MMM","MM","M","o","E","REGEX_FORMAT","parseDate","parser","dat","join","getTime","parse","time","createDateArray","start","end","dates","startTemp","push","setUTCHours","setHours","getNewDateObject","cellUtils","configExists","obj","keys","isDefined","prop","hasArray","hasDate","dayMonthYear","undefined","DisabledDate","disabledDates","_utils","_disabledDates","config","makeCellUtils","exists","to","from","has","customPredictor","daysOfMonth","daysOfWeek","ranges","specificDates","isDateDisabledVia","range","u","some","thisRange","hasFrom","hasTo","specificDate","indexOf","isMonthDisabledVia","isYearInPast","isYearInFuture","isYearDisabledVia","isDateDisabled","isDisabledVia","isMonthDisabled","dayDate","isYearDisabled","monthDate","getEarliestPossibleDate","nextDate","getLatestPossibleDate","HighlightedDate","highlighted","_highlighted","highlightedDates","includeDisabled","isHighlightingNotPossible","isDateHighlightedVia","isDateHighlighted","isHighlightedVia","getPopupElementSize","element","originalDisplay","style","display","originalVisibility","visibility","styles","window","getComputedStyle","width","offsetWidth","parseInt","marginLeft","marginRight","height","offsetHeight","marginTop","marginBottom","getRelativePosition","el","elRelative","targetWidth","targetHeight","appendToBody","fixedPosition","left","top","offsetX","offsetY","relativeRect","getBoundingClientRect","documentWidth","document","documentElement","clientWidth","documentHeight","clientHeight","pageXOffset","pageYOffset","calendarBounding","outOfBoundsRight","right","innerWidth","outOfBoundsBottom","bottom","innerHeight","fixedPositionRight","fixedPositionTop","setLeft","setRight","setBottom","setTop","hasRelativeWidth","hasRelativeHeight"],"mappings":"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"}